//BY NEURONS ART AND TECHNOLOGY ALL RIGHTS RESERVED AND COPYRIGHTED.//IN ASSOCIATION WITH LC CARGO XPRESS LOS ANGELES//AUTHORS: SUI GENERIS / OSCAR ALCANTARA//  IMPORTANT  ALWAYS SEND THE VARIABLE USER = PARSE.USER.CURRENT() TO ALL TEMPLATES FOR NO INTERNAL SERVER ERROR WHEN USING THE TOPBAR IN THE GENERALS PARTITIONSmoment = require('cloud/moment');exports.login = function(req, res){      res.render('login.ejs');};exports.pendingRegistration = function(req, res){      res.render('pendingRegistration.ejs');};exports.register = function(req, res){      res.render('register.ejs');};//logout userexports.logout = function(req, res) {    Parse.User.logOut();    res.redirect('/');  };//Logins USER exports.logins = function(req, res){  Parse.User.logIn(req.body.usrname, req.body.pwd).then(function(user) {	  res.redirect('/profile');  }, function(error) {// Show the error message and let the user try again    res.render('login.ejs');  });};//directs to profile needs user sessionexports.profile = function(req, res){	var usrClass = Parse.User.current().get("Class");	if(!Parse.User.current()){      res.redirect('/');	  //IF USER IS A STAFF  }else if(usrClass == "staff"){	  var user = Parse.User.current();	  	      res.render('staff_profile.ejs', { 			  user: user	      });	  //IF USER IS A CLIENT REDIRECT TO THE HOME FOR CLIENTS  }else if(usrClass == "client"){	  var usrID = Parse.User.current().get("ClientID");	  var queryClients = new Parse.Query("Clients");	  queryClients.equalTo("objectId", usrID);	  queryClients.first({		  success: function(object){	      res.render('client_profile.ejs', { 	  		user: object	      });	  }	  });    }else if(usrClass == "agency"){	  var usrID = Parse.User.current().get("AgencyID");	  var queryAgency = new Parse.Query("Agencies");	  queryAgency.equalTo("objectId", usrID);	  queryAgency.first({		  success: function(object){	      res.render('agency_profile.ejs', { 	  		agency: object	      });	  }	  });    }};//STAFF SECTION//SHOWS WAREHOUSE TABLE OF LABELS (LABELS ARE RAW BOXES THAT ARRIVED AND HAVENT BEEN CONSOLIDATED)//SHOWS WAREHOUSE TABLEfunction volume_condition(){    //VOLUME CONDITION    if(req.body.filterby == "volume")    {        var volume = req.body.searchtext;                if(req.body.volumecond == "lessthan")        {            queryWareHouse.lessThan('Volume', parseInt(volume) );                        //res.render(debug.ejs, {vardump:volume});            //return;         }        else if(req.body.volumecond == "greaterthan")        {            queryWareHouse.greaterThan('Volume', parseInt(volume) );        }        else        {            queryWareHouse.equalTo('Volume', parseInt(volume) );        }    }    }function date_condition(){    //DATE INTERVAL    if(req.body.filterby == "Date")    {        //var begindate = new Date(parseInt(y), parseInt(m)-1, parseInt(d));        var begindate = new Date(req.body.searchtext);        var enddate = new Date(req.body.filterdate);                queryWareHouse.greaterThan('ReceiptDate', begindate);        queryWareHouse.lessThan('ReceiptDate', enddate );                 //res.render(debug.ejs, {vardump:enddate});        //return;     }    else    {   //si no fue date interval, entonces checar el rango de fecha preseleccionado        if(req.body.filterdate == "Today")        {            var now = new Date();            now.setHours(0,0,0);                        nowbegin = new Date(now.getTime() - (1000) );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                        //res.render(debug.ejs, {vardump:nowend});            //return;         }        else if(req.body.filterdate == "Yesterday")        {            var now = new Date();            now.setHours(0,0,0);                        var difftime = (24 * 3600 * 1000); // one day                        nowbegin = new Date(now.getTime() - difftime - (1000) );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() - difftime + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                    }        else if(req.body.filterdate == "This week")        {                        var now = new Date();            now.setHours(0,0,0);                        //dia de la semana            var nday = now.getDay()+1;  //index zero based                        var difftime = nday * (24 * 3600 * 1000); // number of day to substract to current date                        nowbegin = new Date(now.getTime() - difftime - (1000) );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                    }        else if(req.body.filterdate == "This month")        {                        var now = new Date();            now.setHours(0,0,0);                        //dia del mes            var nday = now.getDate()-1;                        var difftime = nday * (24 * 3600 * 1000); // number of day to substract to current date                        nowbegin = new Date(now.getTime() - difftime - (1000) );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                        //res.render(debug.ejs, {vardump:nowbegin});            //return;         }        else if(req.body.filterdate == "Last month")        {                        var now = new Date();            now.setHours(0,0,0);            now.setDate(0);                        //mes del anio            //var n = now.getMonth()-1;                        nowbegin = new Date(now.getTime() - (1000) );            nowbegin.setMonth(now.getMonth()-1 );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                        //res.render(debug.ejs, {vardump:nowbegin});            //return;         }        else if(req.body.filterdate == "Current year")        {                        var now = new Date();            now.setHours(0,0,0);                        nowbegin = new Date(now.getTime() - (1000) );            nowbegin.setDate( 1 );            nowbegin.setMonth(0);                        var nowend = new Date(now.getTime() );            nowend.setHours(23,59,59);                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                        //res.render(debug.ejs, {vardump:nowend});            //return;         }    }}function warefilter(results){	    //variables que vienen por POST    var filterby = req.body.filterby;    var searchtext = req.body.searchtext;        //en este arreglo almacenaremos el resultado filtrado    var resultfilter = [];		           //recorrer la lista de objetos en el resultado    for (var i = 0; i < results.length; i++){        var object = results[i];                //obtenemos el valor de este objeto en el campo de busqueda        var field = object.get(filterby);        if(filterby == "Transport"  || filterby == "Country" || filterby == "Warehouse" || filterby == "Invoice"){            //minusculas             field = field.toLowerCase();            searchtext = searchtext.toLowerCase();            //verificar si contiene el texto que buscamos            if(field.search(searchtext) != -1){            resultfilter.push(object);            }        }else if(filterby == "Receipt"){            if(field == parseInt(searchtext) ){                //agregar a la nueva lista de resultado                resultfilter.push(object);            }        }else if(filterby == "Shipper" || filterby == "Consignee"){            field = field.get('Name');            //minusculas             field = field.toLowerCase();            searchtext = searchtext.toLowerCase();                            //verificar si contiene el texto que buscamos            if(field.search(searchtext) != -1){                resultfilter.push(object);            }        }        else resultfilter.push(object);    }        return resultfilter;}//opens table to consolidateexports.consolidateLabelTable = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');	}else{		var queryWareHouse = new Parse.Query("WareHouse");		queryWareHouse.descending('createdAt');        //INCLUDE        queryWareHouse.include("Shipper");        queryWareHouse.include("Consignee");        		queryWareHouse.find().then(			function(results){		                    res.render('staff_newConsolidate.ejs', {labels: results,						user: user, correction:"y"					});				});	}};exports.staff_warehouse_consolidate = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();		if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {		        //res.render(debug.ejs, {vardump:req.params.myparam});        //return;                         var consolidate = "Consolidate detail:\n\n";        var stritems = req.params.myparam;        var items = stritems.split(',');                for(i in items)        {            if(items[i] != '')                consolidate += "Receipt number: " + items[i] + "\n---------------------------\n";        }                res.render('staff_newLabelConsolidate.ejs', {correction: "y", myparam:consolidate, user: user });	}};exports.addconsolidation = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();		if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {	                            //generation of the receipt number        var txt_receipt = 1;                var repackquery = new Parse.Query("Repacks");                if( typeof repackquery != 'undefined')        {            repackquery.descending('Receipt');                        repackquery.first().then(                        function(result)                        {                            var r = result.get('Receipt');                            if( typeof r == "undefined")                            {                                txt_receipt = 1;                            }                            else                            {                                txt_receipt = r+1;                            }                                                    }                    );        }                          var txt_receiptDate = new Date(req.body.txt_receiptDate);                var txt_agent = req.body.txt_agent;        var txt_shipper = req.body.txt_shipper;        var txt_consignee = req.body.txt_consignee;        var lst_transport = req.body.lst_transport;        var lst_warehouse = req.body.lst_warehouse;        var usrCountry = req.body.usrCountry;        var txt_prices = req.body.txt_prices;        var txt_extracost = req.body.txt_extracost;        var txt_weight = req.body.txt_weight;        var txt_invoice = req.body.txt_invoice;        var txt_weightvol = req.body.txt_weightvol;        var txt_value = req.body.txt_value;        var txt_volume = req.body.txt_volume;        var txt_zone = req.body.txt_zone;        var txt_content = req.body.txt_content;        var txt_generalnotes = req.body.txt_generalnotes;        var txt_internalnotes = req.body.txt_internalnotes;        var clientID = req.body.txt_clientID;        var agencyID = req.body.agencyID;        var correction = req.body.correction;        //extraccion de las cajas        var c=1;        var boxes = [];        do{            boxes.push({                        'lenght':req.body["txt_length-" + c.toString()],                        'width':req.body["txt_width-" + c.toString()],                        'height':req.body["txt_height-" + c.toString()],                        'weight':req.body["txt_weight-" + c.toString()],                        'boxes':req.body["txt_boxes-" + c.toString()]});                        c += 1;        }        while(typeof req.body["txt_length-" + c.toString()] != "undefined");                 // The object was retrieved successfully.        //the data of the related objects        var Clients = Parse.Object.extend("Clients");        var query2 = new Parse.Query(Clients);	        query2.get( clientID ,{            success:             function(client){                              //res.render(debug.ejs, {vardump:client});                    //return;                                    var Repacks = Parse.Object.extend("Repacks");                    var repack = new Repacks();                                        //save the client as a pointer                    repack.set("Consignee", client);                    //Save warehouse                    repack.save({                        Receipt: txt_receipt,                        ReceiptDate: txt_receiptDate,                        Agent: txt_agent,                        Transport: lst_transport,                        Warehouse: lst_warehouse,                        Country: usrCountry,                        Prices: txt_prices,                        ExtraCost: txt_extracost,                        Weight: txt_weight,                        Invoice: txt_invoice,                        WeightVol: txt_weightvol,                        Value: txt_value,                        Volume: txt_volume,                        Zone: txt_zone,                        Content: txt_content,                        GeneralNotes: txt_generalnotes,                        InternalNotes: txt_internalnotes,                        Boxes: JSON.stringify(boxes)                      }, {                        success: function(post) {                            if(correction === "y"){                            res.redirect("/newlabel");                        }else{                            res.redirect("/staff_newLabel");                        }                        },                        error: function(post, error) {                          // The save failed.                          // error is a Parse.Error with an error code and message.                        }                      });                       },                error: 	//error on query for Agencies by objectID                function(object, error){                        // The object was not retrieved successfully.                        // error is a Parse.Error with an error code and message.                                            }            });    }         };// insert a new warehouse LABELexports.addwarehousepost = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();		if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {	                    var queryWareHouse = new Parse.Query("WareHouse");        queryWareHouse.descending('Receipt');                //generation of the receipt number        var txt_receipt = 1;                        queryWareHouse.first().then(                    function(result)                    {                        var r = result.get('Receipt');                        if( typeof r == "undefined")                        {                            txt_receipt = 1;                        }                        else                        {                            txt_receipt = r+1;                        }                                            }                );                          var txt_receiptDate = new Date(req.body.txt_receiptDate);                var txt_agent = req.body.txt_agent;        var txt_shipper = req.body.txt_shipper;        var txt_consignee = req.body.txt_consignee;        var lst_transport = req.body.lst_transport;        var lst_warehouse = req.body.lst_warehouse;        var usrCountry = req.body.usrCountry;        var txt_prices = req.body.txt_prices;        var txt_extracost = req.body.txt_extracost;        var txt_weight = req.body.txt_weight;        var txt_invoice = req.body.txt_invoice;        var txt_weightvol = req.body.txt_weightvol;        var txt_value = req.body.txt_value;        var txt_volume = req.body.txt_volume;        var txt_zone = req.body.txt_zone;        var txt_content = req.body.txt_content;        var txt_generalnotes = req.body.txt_generalnotes;        var txt_internalnotes = req.body.txt_internalnotes;        var clientID = req.body.txt_clientID;        var agencyID = req.body.agencyID;        var correction = req.body.correction;        //extraccion de las cajas        var c=1;        var boxes = [];        do{            boxes.push({                        'lenght':req.body["txt_length-" + c.toString()],                        'width':req.body["txt_width-" + c.toString()],                        'height':req.body["txt_height-" + c.toString()],                        'weight':req.body["txt_weight-" + c.toString()],                        'boxes':req.body["txt_boxes-" + c.toString()]});                        c += 1;        }        while(typeof req.body["txt_length-" + c.toString()] != "undefined");                 //res.render(debug.ejs, {vardump:clientID});        //return;                agency = "Cool";                //the data of the related objects        var query = new Parse.Query("Agencies");        //query.descending(createdAt);        //query.equalTo(objectId, req.body.agencyID)        query.get(req.body.agencyID, {            success:                 function(agency)                 {                    // The object was retrieved successfully.                    //the data of the related objects                    var Clients = Parse.Object.extend("Clients");                    var query2 = new Parse.Query(Clients);	                    query2.get( clientID ,{                        success:                         function(client){                                                      //res.render(debug.ejs, {vardump:client});                                //return;                                                            var WareHouse = Parse.Object.extend("WareHouse");                                var warehouse = new WareHouse();                                //save the agency as a pointer                                warehouse.set("Shipper", agency);                                //save the client as a pointer                                warehouse.set("Consignee", client);                                                                                                                                       //Save warehouse                                warehouse.save({                                    Receipt: txt_receipt,                                    ReceiptDate: txt_receiptDate,                                    Agent: txt_agent,                                    Transport: lst_transport,                                    Warehouse: lst_warehouse,                                    Country: usrCountry,                                    Prices: txt_prices,                                    ExtraCost: txt_extracost,                                    Weight: txt_weight,                                    Invoice: txt_invoice,                                    WeightVol: txt_weightvol,                                    Value: txt_value,                                    Volume: txt_volume,                                    Zone: txt_zone,                                    Content: txt_content,                                    GeneralNotes: txt_generalnotes,                                    InternalNotes: txt_internalnotes,                                    Boxes: JSON.stringify(boxes)                                  }, {                                    success: function(post) {                                        if(correction === "y"){                                        res.redirect("/newlabel");                                    }else{                                        res.redirect("/staff_newLabel");                                    }                                    },                                    error: function(post, error) {                                      // The save failed.                                      // error is a Parse.Error with an error code and message.                                    }                                  });                                   },                            error: 	//error on query for Agencies by objectID                            function(object, error){                                    // The object was not retrieved successfully.                                    // error is a Parse.Error with an error code and message.                                                                    }                        });                }            ,            error:                 function(object, error)                 {                    // The object was not retrieved successfully.                    // error is a Parse.Error with an error code and message.                    // The object was retrieved successfully.                    res.render("debug.ejs", {vardump:"ERROR"});                    return;                  }        });    }       			};//peticion POST de autofill shipperexports.autofill_shipper = function(req, res){	if(!Parse.User.current()){		res.redirect('/');	}else{			var query = new Parse.Query("Agencies");		query.descending('createdAt');		query.find({		success: 		function(results){				//variables que vienen por POST				var txt_shipper = req.body.txt_agency;				//en este arreglo almacenaremos el resultado				var resultsearch = [];				//recorrer la lista de objetos en el resultado				for (var i = 0; i < results.length; i++){					var object = results[i];					//obtenemos el nombre de la agencia					var field = object.get("Name");					//minusculas 					field = field.toLowerCase();					txt_shipper = txt_shipper.toLowerCase();					//verificar si contiene el texto que buscamos					if(field.search(txt_shipper) != -1){						//agregar a la nueva lista de resultado						resultsearch.push(object);					}				}				res.send(JSON.stringify(resultsearch));			}		});	}};//peticion POST para hacer busqueda de clientes usando AJAXexports.autofill_client = function(req, res){	if(!Parse.User.current()){		res.redirect('/');	}else{			var query = new Parse.Query("Clients");		query.descending('createdAt');		query.find({		success: 		function(results){				//variables que vienen por POST				var txt_search = req.body.txt_search;				//en este arreglo almacenaremos el resultado				var resultsearch = [];				//recorrer la lista de objetos en el resultado				for (var i = 0; i < results.length; i++){					var object = results[i];					//obtenemos el nombre de la agencia					var field = object.get("Name");					//minusculas 					field = field.toLowerCase();					txt_search = txt_search.toLowerCase();					//verificar si contiene el texto que buscamos					if(field.search(txt_search) != -1){						//agregar a la nueva lista de resultado						resultsearch.push(object);					}				}				res.send(JSON.stringify(resultsearch));			}		});	}};//SHOWS AND FILTER WAREHOUSE TABLEexports.staffWarehouseFilter = function(request, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {        req = request;        		queryWareHouse = new Parse.Query("WareHouse");		queryWareHouse.descending('createdAt');                volume_condition();                date_condition();                //INCLUDE        queryWareHouse.include("Shipper");        queryWareHouse.include("Consignee");                		queryWareHouse.find().then(			function(results){	                                resultfilter = warefilter(results);                                res.render('staff_warehouse.ejs', {labels: resultfilter, user:user});                            });	}};           		   //AIR , SEA AND LAND				   		//sea not PROCESSED			    exports.staff_seaSectionNP = function(req, res){  	var user = Parse.User.current();  	var usrClass = Parse.User.current().get("Class");     if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" ) {		   res.redirect('/');				   }else{	 	 var querySea = new Parse.Query("Repacks");		    querySea.equalTo("Shipment", "Sea");		    querySea.descending('createdAt');		    querySea.find({			  success: function(results){				  res.render('staff_seaSectionNP.ejs', { 				   repacks: results,				   	user: user				   		   	   		 });				   		   	   		    }				   		   	   		});				   		   	   }				   		   }						   exports.staff_seaSectionP = function(req, res){	var user = Parse.User.current();    var usrClass = Parse.User.current().get("Class");		  if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" ) {			 res.redirect('/');				  }else{		var querySea = new Parse.Query("Repacks");		    querySea.equalTo("Shipment", "Sea");		    querySea.descending('createdAt');			 querySea.find({	 			  success: function(results){				res.render('staff_seaSectionP.ejs', { 				  repacks: results,			   	user: user			  	   		 });		 	   		    }			   		});				   	   }						    }						   		   		  //SETTINGS exports.staff_mainSettings = function(req, res){   var user = Parse.User.current();   var usrClass = Parse.User.current().get("Class");     if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/login');				}else{	res.render('settings/staff_mainSettings.ejs', {user: user});}		 };	  //displays clientsexports.settings_Clients = function(req, res){  var user = Parse.User.current();  var usrClass = Parse.User.current().get("Class");	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency") {	  res.redirect('/');		  }else{		  var queryClients = new Parse.Query("Clients");		  queryClients.descending('createdAt');		  queryClients.find({		  success: function(results){		  	res.render('settings/settings_Clients.ejs', { 		  	clients: results,				user: user	   		 });	   		    }	   		});		   	   }		   	   };						  //staff list to edit or delete staff membersexports.staff_staffList = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency") {	   res.redirect('/');			 }else{		var queryStaffs = new Parse.Query("User");			queryStaffs.equalTo("Class", "staff");		  queryStaffs.include("StaffId");		 queryStaffs.find({			 success: function(results){				res.render('settings/staffList.ejs', { 					staffs: results,					 user: user					    		 });					    		    }					    		});					 	   	   }					 	   	   };																				  //staff list to edit or delete staff members exports.addStaffSection = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");	 if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){		res.redirect('/login');			}else{	res.render('settings/addstaff.ejs', {user: user});				 }					 };		    	//REGISTRATIONS				   // Signs up a new user and data validation  exports.clientReg = function(req, res) {     var usrFullName = req.body.usrFullName;     var usrCompany= req.body.usrCompany;	 var usrCountry = req.body.usrCountry;     var usrState = req.body.usrState;	 var usrCity = req.body.usrCity;	 var usrDestination = req.body.usrDestination;	 var usrAddress = req.body.usrAddress;	 var usrAddress2 = req.body.usrAddress2;	 var usrLanguage = req.body.usrLanguage;	 var usrID1 = req.body.usrID1;	 var usrID2 = req.body.usrID2;	 var usrTel = req.body.usrTel;	 var reg_email = req.body.usrEmail;	 var atpos = reg_email.indexOf("@");	 var dotpos = reg_email.lastIndexOf(".");     var usrNotes = req.body.usrNotes;				  	//not null name				   	if(usrFullName == "" || usrFullName == null || usrFullName.length<2){				   	  res.redirect('/1');				     //not null company				 	}else if(usrCompany == "" || usrCompany == null){				  	  res.redirect('/r2');				 	//not null username				 	}else if(usrCountry == "" || usrCountry == null){				  	  res.redirect('/r3');				 	//not null STATE				 	}else if(usrState == "" || usrState == null){				 	  res.redirect('/4');				 	//not null city				  	}else if(usrCity == "" || usrCity == null){				 	  res.redirect('/5');				 	//not null Destination				 	}else if(usrDestination == "" || usrDestination == null){				 	  res.redirect('/6');				     //not null Address						 	}else if(usrAddress == "" || usrAddress == null){				 	  res.redirect('/r7');				 	 //not null usrID1				 	}else if(usrID1 == "" || usrID1 == null){				 	  res.redirect('/8');				 	//not null Tel				     }else if(usrTel == "" || usrTel == null){				       res.redirect('/r9r');				 	//not null email				     }else if(reg_email == "" || reg_email == null){				  	  res.redirect('/r10');				    //valid email				  	}else if(atpos < 1 || ( dotpos - atpos < 2 )) {				  	  res.redirect('/11');				  	//not null password				  	}else{ 					 	   //Create Client Object Client class and client is the new instance of the class				 	    var Client = Parse.Object.extend("Clients");				 	    var client = new Client();				 	//Save Client				 	  client.save({				 	    Name: usrFullName,				 	    Company: usrCompany,				 		Country: usrCountry,				 	    State: usrState,				 		City: usrCity,				 		Destination: usrDestination,				 		Address: usrAddress,				 	    Address2: usrAddress2,				 	    Language: usrLanguage,				 	    ID1: usrID1,				 	    ID2: usrID2,				 		Telephone: usrTel,				 		Email: reg_email,				 		  Status: "Pending",				 		Notes: usrNotes				 	  }, {				 	    success: function(post) {				 			res.redirect("/pendingRegistration");				 	    },				 	    error: function(post, error) {				 	      // The save failed.				 	      // error is a Parse.Error with an error code and message.				 	    }				 	  }); 				 	}				 };// Signs up a new Agency and data validationexports.agencyReg = function(req, res) {	var agName = req.body.agName;    var agCountry = req.body.agCountry;    var agState = req.body.agState;	var agCity = req.body.agCity;    var agZip = req.body.agZip;	var agDestination = req.body.agDestination;	var agAddress = req.body.agAddress;	var agAddress2 = req.body.agAddress2;	var agPoBox = req.body.agPoBox;	var agPoBoxId = req.body.agPoBoxId;	var agLanguage = req.body.agLanguage;	var agID1 = req.body.agID1;	var agID2 = req.body.agID2;	var agTel = req.body.agTel;	var agWebsite = req.body.agWebsite;	var reg_email = req.body.agEmail;	var atpos = reg_email.indexOf("@");	var dotpos = reg_email.lastIndexOf(".");	var agNotes = req.body.agNotes;	//not null name	if(agName == "" || agName == null || agName.length<2){		res.redirect('/register');		 //not null country		}else if(agCountry == "" || agCountry == null){			  res.redirect('/register');			   	//not null STATE			   	}else if(agState == "" || agState == null){			   	  res.redirect('/register');			   	//not null city			    	}else if(agCity == "" || agCity == null){			   	  res.redirect('/register');			   	//not null Destination			   	}else if(agDestination == "" || agDestination == null){			   	  res.redirect('/register');			       //not null Address					   	}else if(agAddress == "" || agAddress == null){			   	  res.redirect('/register');			   	 //not null usrID1			   	}else if(agID1 == "" || agID1 == null){			   	  res.redirect('/register');			   	//not null Tel			       }else if(agTel == "" || agTel == null){			         res.redirect('/register');			   	//not null ZIP CODE			       }else if(agZip == "" || agZip == null){			         res.redirect('/register');			   	//not null email			       }else if(reg_email == "" || reg_email == null){			    	  res.redirect('/register');			      //valid email			    	}else if(atpos < 1 || ( dotpos - atpos < 2 )) {			    	  res.redirect('/register');			    	//not null password			    	}else{ 				   	   //Create Client Object Client class and client is the new instance of the class			   	    var Agency = Parse.Object.extend("Agencies");			   	    var agency = new Agency();			   	//Save Client			   	  agency.save({			   	    Name: agName,			   		Country: agCountry,			   	    State: agState,			   		City: agCity,			   		Destination: agDestination,			   		Address: agAddress,			   	    Address2: agAddress2,			   		  ZIP: agZip,			   	    Language: agLanguage,			   	    ID1: agID1,			   	    ID2: agID2,			   		PoBox: agPoBox,			   		  PoBoxId: agPoBoxId,			   		Telephone: agTel,			   		  Website: agWebsite,			   		Email: reg_email,			   		  Status: "Pending",			   		Notes: agNotes			   	  }, {			   	    success: function(post) {			   			res.redirect("/pendingRegistration");			   	    },			   	    error: function(post, error) {			   	      // The save failed.			   	      // error is a Parse.Error with an error code and message.			   	    }			   	  }); 			   	}			   };			   			   															// ADD STAFF MEMBERS exports.addStaff= function(req, res) {	         var staffName = req.body.staffName;	         var staffLastName= req.body.staffLastName;	         var staffJobPosition = req.body.staffJobPosition;			 var staffDepartment = req.body.staffDepartment;			 var staffAddress = req.body.staffAddress;			 var staffAddress2 = req.body.staffAddress2;			 var staffTelephone = req.body.staffTelephone;			 var staffUsername = req.body.staffUsername;			 var staffPassword = req.body.staffPassword;			 var staffConPassword = req.body.staffConPassword;			 var staffEmail = req.body.staffEmail;			 var atpos = staffEmail.indexOf("@");			 var dotpos = staffEmail.lastIndexOf(".");			 											//not null name		   	if(staffName == "" || staffName == null || staffName.length<2){		   	  res.redirect('/addStaff');		     //not null lastname		 	}else if(staffLastName == "" || staffLastName == null){		  	  res.redirect('/addStaff');		 	//not null job Position		 	}else if(staffJobPosition == "" || staffJobPosition == null){		  	  res.redirect('/addStaff');		 	//not null Address		 	}else if(staffAddress == "" || staffAddress == null){		 	  res.redirect('/addStaff');		 	//not null Telephone		  	}else if(staffTelephone == "" || staffTelephone == null){		 	  res.redirect('/addStaff');		 	//not null Username		 	}else if(staffUsername == "" || staffUsername == null){		 	  res.redirect('/addStaff');		     //not null Password			 	}else if(staffPassword == "" || staffPassword == null){		 	  res.redirect('/addStaff');		 	 //not null or dirrerent Password Confirmation		 	}else if(staffConPassword == "" || staffConPassword == null || staffConPassword != staffPassword){		 	  res.redirect('/addStaff');		 	//not null email		     }else if(staffEmail == "" || staffEmail == null){		  	  res.redirect('/addStaff');		    //valid email		  	}else if(atpos < 1 || ( dotpos - atpos < 2 )) {		  	  res.redirect('/addStaff');		  	}else{				 	         //Add Staff		 	    var Staff = Parse.Object.extend("Staff");		 	    var staff = new Staff();		 	//Save Staff in Staff Table		 	  staff.save({		 	    Name: staffName,		 	    LastName: staffLastName,		 		JobPosition: staffJobPosition,		 	    Department: staffDepartment,		 		Address: staffAddress,		 		Address2: staffAddress2,				  Telephone: staffTelephone		 			 	  }, {		 	    success: function(post) {		 														    var user = new Parse.User();					    user.set('username', staffUsername);					user.set('email', staffEmail);				    user.set('password', staffPassword);					user.set('Class', "staff");					user.set('StaffId', post);				    user.save(); 	  				      res.redirect('staff_staffList');																 	    },		 	    error: function(post, error) {		 	      // The save failed.		 	      // error is a Parse.Error with an error code and message.		 	    }		 	  }); 		 	}		 };				 	  												               //WAREHOUSE RESPONSIVEexports.staff_Warehouse = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {			res.redirect('/');	}    else    {        req.body["document"] = "Staff/Warehouses/Labels";        req.body["conditions"] = {equalTo:{"Status":"Received", "Repacked": "NO"}};                req.body["collection"] = "Warehouses";        req.body["cols"] = {                            "Receipt":"",                            "Consignee":{"Name":""}, /*This is the sintax for return fields of pointers showed on table*/                            "Shipper":{"Name":""}, /*This is the sintax for return fields of pointers showed on table*/                            "ReceiptDate":"",                            "Country":"",                            "Warehouse":"",                            "Invoice":"",                            "Transport":"",			                "Status":"",                            "objectId":""                        };                search(req, res);	}};               //THE RESPONSIVE REPACK SECTIONexports.staff_Repack = function(req, res){        var usrClass = Parse.User.current().get("Class");    var user = Parse.User.current();    if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){        res.redirect('/');    }    else    {                req.body["document"] = "Staff/Warehouses/Repack";        req.body["conditions"] = {equalTo:{"Status":"Received"}};                req.body["collection"] = "Warehouses";        req.body["cols"] = {                            "Receipt":"",                            "Zone":"", /*This is the sintax for return fields of pointers showed on table*/                            "ReceiptDate":"",                            "Country":"",                            "Invoice":"",                            "Transport":"",			                "Volume":"",                            "Warehouse":"",                            "objectId":""                        };                                search(req, res);    }};//NEWLABEL RESPONSIVEexports.staffNewLabel = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');			  }else{	 res.render('Staff/Warehouses/NewLabel.ejs', {correction: "n", params:{"message":""},	  user: user});}};//NEWLABEL FLOATINGexports.newlabelFloat = function(req, res){      res.render('Staff/Warehouses/NewLabel.ejs', {correction: "y", message:""});};//STAFF CLIENTS PROFILE RESPONSIVE exports.staff_clientProfile = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){		    res.redirect('/login');		}else{			res.render('Staff/Clients/Profiles.ejs', {user: user});		}		   };//STAFF ACTIVE CLIENTS RESPONSIVEexports.activeClients = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {			res.redirect('/');	}    else    {        req.body["document"] = "Staff/Clients/Actives";        req.body["collection"] = "Clients";        req.body["conditions"] = {equalTo: {'Status' : "Active"}};        req.body["cols"] = {                            "Name":"",                            "Country":"",                             "Company":"",                            "Address":"",                            "Telephone":"",                            "Email":"",                            "Destination":""                        };                search(req, res);	}};//STAFF PENDING CLIENTS RESPONSIVEexports.pendingClients = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {			res.redirect('/');	}    else    {        req.body["document"] = "Staff/Clients/Pendings";        req.body["collection"] = "Clients";        req.body["conditions"] = {equalTo: {'Status' : "Pending"}};        req.body["cols"] = {                            "Name":"",                            "Country":"",                             "Company":"",                            "Address":"",                            "Telephone":"",                            "Email":"",                            "Destination":""                        };                search(req, res);	}}; //STAFF CLIENTS RESERVATIONS RESPONSIVEexports.reservations = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {			res.redirect('/');	}    else    {        req.body["document"] = "Staff/Clients/Reservations";        req.body["collection"] = "Reservations";        //req.body["conditions"] = {equalTo: {'Status' : "Pending"}};        req.body["cols"] = {                            "Status":"",                            "ClientName":"",                             "Arrival":"",                            "Departure":"",                            "Airline":"",                            "Flight":"",                            "Telephone":"",                            "Destination":""                        };                search(req, res);	}};//STAFF AGENCIES SECTION RESPONSIVEexports.staff_agencyProfile = function(req, res){ 	var user = Parse.User.current(); 	var usrClass = Parse.User.current().get("Class");        if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {        res.redirect('/login');    }    else    {        res.render('Staff/Agencies/Profiles.ejs', {user: user});    }};                           //renders and display active agencies	   exports.activeAgencies = function(req, res){    var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {			res.redirect('/');	}    else    {        req.body["document"] = "Staff/Agencies/Actives";        req.body["collection"] = "Agencies";        req.body["conditions"] = {equalTo: {'Status' : "Active"}};        req.body["cols"] = {                            "Name":"",                            "Website":"",                             "Address":"",                            "Country":"",                            "State":"",                            "Telephone":"",                            "Email":""                        };                search(req, res);	}};		   //renders and display pending agencies	   exports.pendingAgencies = function(req, res){    var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {			res.redirect('/');	}    else    {        req.body["document"] = "Staff/Agencies/Pendings";        req.body["collection"] = "Agencies";        req.body["conditions"] = {equalTo: {'Status' : "Pending"}};        req.body["cols"] = {                            "Name":"",                            "Website":"",                             "Address":"",                            "Country":"",                            "State":"",                            "Telephone":"",                            "Email":""                        };                search(req, res);	}};//AIR RESPONSIVEexports.staff_airSectionNP = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");        if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" )    {      res.redirect('/');    }    else    {        req.body["document"] = "Staff/Air/NotProcessed";        req.body["collection"] = "Repacks";        req.body["conditions"] = {equalTo: {'Status' : "NotProcessed", "Shipment":"Aereal"}};        req.body["cols"] = {                            "Receipt":"",                            "InternalNotes":"",                             "Weight":"",                            "Volume":"",                            "Agent":"",                            "Country":"",                            "Warehouse":""                        };                search(req, res);            }};		   //air Processedexports.staff_airSectionP = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");        if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" )    {      res.redirect('/');    }    else    {        req.body["document"] = "Staff/Air/Processed";        req.body["collection"] = "Repacks";        req.body["conditions"] = {equalTo: {'Status' : "Processed", "Shipment":"Aereal"}};        req.body["cols"] = {                            "Receipt":"",                            "InternalNotes":"",                             "Weight":"",                            "Volume":"",                            "Agent":"",                            "Country":"",                            "Warehouse":""                        };                search(req, res);    }};exports.staff_terrestralSectionNP = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");        if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" )    {      res.redirect('/');    }    else    {        req.body["document"] = "Staff/Terrestral/NotProcessed";        req.body["collection"] = "Repacks";        req.body["conditions"] = {equalTo: {'Status' : "NotProcessed", "Shipment":"Terrestral"}};        req.body["cols"] = {                            "Receipt":"",                            "InternalNotes":"",                             "Weight":"",                            "Volume":"",                            "Agent":"",                            "Country":"",                            "Warehouse":""                        };                search(req, res);    }};exports.staff_terrestralSectionP = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");        if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" )    {      res.redirect('/');    }    else    {        req.body["document"] = "Staff/Terrestral/Processed";        req.body["collection"] = "Repacks";        req.body["conditions"] = {equalTo: {'Status' : "Processed", "Shipment":"Terrestral"}};        req.body["cols"] = {                            "Receipt":"",                            "InternalNotes":"",                             "Weight":"",                            "Volume":"",                            "Agent":"",                            "Country":"",                            "Warehouse":""                        };                search(req, res);    }};exports.staff_seaSectionNP = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");        if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" )    {      res.redirect('/');    }    else    {        req.body["document"] = "Staff/Sea/NotProcessed";        req.body["collection"] = "Repacks";        req.body["conditions"] = {equalTo: {'Status' : "NotProcessed", "Shipment":"Sea"}};        req.body["cols"] = {                            "Receipt":"",                            "InternalNotes":"",                             "Weight":"",                            "Volume":"",                            "Agent":"",                            "Country":"",                            "Warehouse":""                        };                search(req, res);    }};exports.staff_seaSectionP = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");        if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" )    {      res.redirect('/');    }    else    {        req.body["document"] = "Staff/Sea/Processed";        req.body["collection"] = "Repacks";        req.body["conditions"] = {equalTo: {'Status' : "Processed", "Shipment":"Sea"}};        req.body["cols"] = {                            "Receipt":"",                            "InternalNotes":"",                             "Weight":"",                            "Volume":"",                            "Agent":"",                            "Country":"",                            "Warehouse":""                        };                search(req, res);    }};// get a single object ... subject to change to generic object factoryexports.getby = function(req, res){    var user = Parse.User.current();    var usrClass = Parse.User.current().get("Class");    //Permisions to visit section of the page    if(!Parse.User.current() || usrClass === "client")    {        res.send(JSON.stringify("Bad session"));    }    else    {        //variables que vienen por POST        var by = req.body.by;        var value = req.body.value;        var classvar = req.body.classvar;                        var query = new Parse.Query(classvar);        query.descending('createdAt');        query.equalTo(by, value);        query.first(        {            success:                 function(results)                {                    res.send(JSON.stringify(results));                }        });                        }};// get a list of results over one single table or classvarexports.searchby = function(req, res){    var user = Parse.User.current();    var usrClass = Parse.User.current().get("Class");    //Permisions to visit section of the page    if(!Parse.User.current() || usrClass === "client")    {        res.send(JSON.stringify("Bad session"));    }    else    {        search(req, res, false);    }};function searchfilter(results, like){	    //en este arreglo almacenaremos el resultado filtrado    var resultfilter = [];		       var likefield = 0;        for(i in like) likefield = i;        if(likefield == "All")        return results;        //recorrer la lista de objetos en el resultado    for (var i = 0; i < results.length; i++)    {        var object = results[i];                //obtenemos el valor de este objeto en el campo de busqueda        var field = object.get(likefield);        var searchtext = "";        if(typeof like[likefield] == "object")        {                            for(j in like[likefield])            {                field = field.get(j);                searchtext = like[likefield][j];            }                        //minusculas             field = field.toLowerCase();            searchtext = searchtext.toLowerCase();                        //verificar si contiene el texto que buscamos            if(field.search(searchtext) != -1)            {                resultfilter.push(object);            }        }        else if(typeof field == "number" )        {            searchtext = parseInt(like[likefield]);                        if(searchtext == field)            {                resultfilter.push(object);            }        }        else         {            searchtext = like[likefield];                        //minusculas             field = field.toLowerCase();            searchtext = searchtext.toLowerCase();                        //verificar si contiene el texto que buscamos            if(field.search(searchtext) != -1)            {                resultfilter.push(object);            }        }            }        return resultfilter;}function search(req, res, norender){        kwargs = req.body;        //variables que vienen por POST    var by = kwargs["by"];    var value = kwargs["value"];    var collection = kwargs["collection"];    var cols = kwargs["cols"];    var conditions = req.body.conditions;        var query = new Parse.Query(collection);        query.descending('createdAt');        for(col in cols)    {        if(typeof cols[col] == "object")            query.include(col);    }            //CONDICIONES    if(typeof conditions != "undefined")    {        for(fieldcondition in conditions)        {                                    for(field in conditions[fieldcondition])            {                condition_obj = conditions[fieldcondition][field];                                if(typeof condition_obj == "object")                {                    condition_obj = new Date(condition_obj.iso);                }                                    if(fieldcondition == "equalTo")                    query.equalTo(field, condition_obj);                                    else if(fieldcondition == "notEqualTo")                    query.notEqualTo(field, condition_obj);                                    else if(fieldcondition == "greaterThan")                    query.greaterThan(field, condition_obj);                                    else if(fieldcondition == "lessThan")                    query.lessThan(field, condition_obj);                                    else if(fieldcondition == "greaterThanOrEqualTo")                    query.greaterThanOrEqualTo(field, condition_obj);                                    else if(fieldcondition == "lessThanOrEqualTo")                    query.lessThanOrEqualTo(field, condition_obj);            }        }    }            //FIXME ... REMOVE NEXT LINE WHEN CONDITIONS ARE STABLE !    if(typeof kwargs["by"] != "undefined")                query.equalTo(by, value);        query.find(    {        success:             function(results)            {                if(typeof req.body['like'] != "undefined")                {                    results = searchfilter(results, req.body.like);                    //req.body["debug"] = JSON.stringify(results);                }                                newresult = [];                                for(i in results)                {                    item = {};                    //item["objectId"] = results[i].id;                                        for(col in cols)                    {                        //special case for extract the object ID                        if(col == 'objectId')                        {                            item["objectId"] = results[i].id;                            continue;                        }                                                if(typeof cols[col] == "object")                        {                                   for(var it in cols[col])                                if(typeof results[i].get(col) != "undefined")                                    item[col] = results[i].get(col).get(it);    //get the value of the pointed register value                        }                        else                        {                            //is a date the result?                            if(typeof results[i].get(col) == 'object')                                item[col] = moment( new Date( results[i].get(col) ) ).format("MM[/]DD[/]YYYY");                            else                                item[col] = results[i].get(col);                                                    }                                                    //item[col] = typeof item[col];                    }                                        newresult.push(item);                }                                //res.send(JSON.stringify(newresult));                var user = Parse.User.current();                                if(typeof norender == "undefined")                {                    res.render(req.body.document + ".ejs", {user:user, results:newresult, params:req.body});                }                else                    res.send(JSON.stringify(newresult));                                                            },        error:            function(error)            {                ;            }    }    );};exports.getrendered = function(req, res){    user = Parse.User.current();    var usrClass = Parse.User.current().get("Class");    //Permisions to visit section of the page    if(!Parse.User.current() || usrClass === "client")    {        res.send(JSON.stringify("Bad session"));    }    else    {                if(typeof req.body["collection"] != "undefined")        {            search(req, res);        }        else if(typeof req.body["by"] != "undefined")        {            searchby(req, res);        }        else        {            res.render(req.body.document + ".ejs", {user:user, params:req.body.params });        }    }};exports.getrenderedby = function(req, res){    var user = Parse.User.current();    var usrClass = Parse.User.current().get("Class");    //Permisions to visit section of the page    if(!Parse.User.current() || usrClass === "client")    {        res.send(JSON.stringify("Bad session"));    }    else    {        //variables que vienen por POST        var by = req.body.by;        var value = req.body.value;        var collection = req.body.collection;                var query = new Parse.Query(collection);        if(by == "objectId")        {            query.get(value,            {                success:                     function(result)                    {                        res.render(req.body.document + ".ejs", {user:user, result:result });                    }            });                    }        else        {            query.equalTo(by, value);            query.first(            {                success:                     function(result)                    {                        res.render(req.body.document + ".ejs", {user:user, result:result });                    }            });        }                        }};//FOR TESTING PURPOSESexports.test = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();		if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {	                var queryWareHouse = new Parse.Query("WareHouse");                queryWareHouse.descending("Receipt");                queryWareHouse.first().then(                    function(result)                    {                                                var r = result.get("Receipt");                                                if( typeof r == "undefined")                        {                            r = 1;                        }                        else                        {                            r = r+1;                        }                                                res.render("debug.ejs", {vardump:JSON.stringify(r)});                        return;                                            }                );                        //res.render("debug.ejs", {vardump:JSON.stringify([req.body, "BAD QUERY"])});        //return;    }}// insert a new register with them pointersexports.extends = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();		if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {	                var pointers = [];        var inc_field = "";                for(i in req.body.values)        {            if(typeof req.body.values[i] == 'object')            {                if(req.body.values[i].__type == "Date")                {                    req.body.values[i] = new Date(req.body.values[i].iso);                }                else if(req.body.values[i].__type == "Autoincrement")                {                                        inc_field = i;                }                else                    //save as a pointer                    pointers[i] = req.body.values[i];            }        }                        var newcollection = Parse.Object.extend(req.body.collection);        var collection = new newcollection();        for(i in pointers)            collection.set(i, pointers[i]);        if(inc_field != "")        {            //the increment            var query = new Parse.Query(req.body.collection);            query.descending(inc_field);                        query.first().then(                        function(result)                        {                            if(typeof result == "undefined")                            {                                req.body.values[inc_field] = 1;                            }                            else                            {                                req.body.values[inc_field] = result.get(inc_field)+1;                            }                                                        //Save                            collection.save(req.body.values, {                                success: function(newreg)                                 {                                    if(typeof req.body["pointed_by"] != "undefined")                                    {                                        var pointers = req.body.pointed_by;                                                                                //UPDATE THE OBJECTS THAT POINT TO THIS NEW REGISTER                                        for(objclass in pointers)                                        {                                                                                        for(fieldpoint in pointers[objclass])                                            {                                                   var items = pointers[objclass][fieldpoint];                                                for(item in items)                                                {                                                    var theObj = Parse.Object.extend(objclass);                                                    var theobj = new theObj();                                                                                                        theobj.id = items[item];                                                    theobj.set(fieldpoint, newreg);                                                                                                        //REQUEST FOR UPDATE ANOTHER FIELDS OF THE POINTED REGISTER?                                                    if(typeof req.body["pointed_update"] != "undefined")                                                    {                                                        //UPDATE ALL FIELDS SPECIFIED BY pointed_update                                                        for(i in req.body.pointed_update)                                                            for(j in req.body.pointed_update[i])                                                                theobj.set(j, req.body.pointed_update[i][j]);                                                    }                                                                                                        theobj.save();                                                }                                            }                                        }                                    }                                                                                                                                                res.render(req.body.document + ".ejs", {user:user, params:req.body.params });                                },                                error: function(post, error)                                 {                                    // The save failed.                                    // error is a Parse.Error with an error code and message.                                }                            });                                                                                 }                    );        }        else        {                                    //Save            collection.save(req.body.values, {                success: function(post)                 {                    //res.render(req.body.document + ".ejs", {user:user, params:req.body.params });                },                error: function(post, error)                 {                    // The save failed.                    // error is a Parse.Error with an error code and message.                }            });                        res.render(req.body.document + ".ejs", {user:user, params:req.body.params });        }    }       			};exports.update = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();		if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {	                var objclass = req.body["collection"];        var objectId = req.body["objectId"];        var values = req.body["values"];                var ObjClass = Parse.Object.extend(objclass);        var obj = new ObjClass();                obj.id = objectId;        for(i in values)        {            obj.set(i, values[i]);        }        obj.save();                res.send(req.body);    }};/*exports.update2 = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();		if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {	        var kwargs = req.body;                var Update = Parse.Object.extend(kwargs["collection"]);        var update = new Parse.Query(Update);                update.equalTo("objectId", kwargs["objectId"]);                update.first({                    success:                            function(obj)                            {                                   for(i in kwargs["values"])                                {                                    obj.set(i, kwargs["values"][i]);                                }                                                                obj.save();                                                                res.send(JSON.stringify(req.body) );                            }                                                    });            }};*/