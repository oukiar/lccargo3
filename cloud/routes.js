//BY NEURONS ART AND TECHNOLOGY ALL RIGHTS RESERVED AND COPYRIGHTED.//IN ASSOCIATION WITH LC CARGO XPRESS LOS ANGELES//AUTHORS: SUI GENERIS / OSCAR ALCANTARAmoment = require('cloud/moment');// COMPANIES LOGINSexports.logins = function(req, res){    var username = req.body.username;    if(typeof req.body.company != "undefined"){        username += "@" + req.body.company;    }        Parse.User.logIn(username, req.body.password,     {        success: function(user)        {		            res.redirect("/profile");        },        error: function(user)        {		            res.redirect("/" + req.body.company);        }    });};exports.pendingRegistration = function(req, res){    res.render('pendingRegistration.ejs', {companylink:req.params.companylink});    return;    if(Parse.User.current() == null){        res.redirect('/');        }else{         var user = Parse.User.current();        /*        res.render('pendingRegistration.ejs');        return;        */                /* DESHABILITADO ... NO FUNCIONA, ESTO ES PARA QUE EL GOTOHOME DE REGISTRATION TE DEJE EN COMPANYLINK, NO EN INDEX */               var query = new Parse.Query("Companies");        query.equalTo("objectId", user.get("Company").id);        query.first({success: function(company){                            Parse.User.logOut();                res.render('pendingRegistration.ejs', {user:user, company:company});            }});            }};exports.register = function(req, res){      res.render('register.ejs');};exports.subscribe = function(req, res){      res.render('subscription.ejs');};exports.databases = function(req, res){      res.render('databases.ejs');};exports.databaseReg = function(req, res){	var Register = Parse.Object.extend("Registers");	var name = req.body.reg_Name;	var company = req.body.reg_Company;	var email = req.body.reg_Email;	var phone = req.body.reg_Phone;	var city = req.body.reg_City;    var reg = new Register();  //Save Client  reg.save({    Name: name,	company: company,    email: email,	  phone: phone,	  city: city  }, {    success: function(post) {		res.redirect("/databases");    },    error: function(post, error) {      // The save failed.      // error is a Parse.Error with an error code and message.    }        });       };exports.registerStore = function(req, res){      res.render('register.ejs', {subscriber: "store"});};exports.reset = function(req, res){  var re_email = req.body.re_email;  var companyLink = req.body.companyLink;  Parse.User.requestPasswordReset(re_email, {	   success: function() {	 	res.render('messages.ejs', {		 title: "Recover",				  msg: "An email has been sent with your login information.</br> Please check your inbox!",			company: companyLink	 		  });	      },	      error: function(error) {	        // Show the error message somewhere	 		  res.render('messages.ejs', {				  title: "Error",				  msg: "There is no record of any email that matches your query!",				  company: companyLink	 		  });	      }	    });		 }//logout userexports.logout_staff = function(req, res) {    Parse.User.current().get("Company").get("companyLink");        var q = new Parse.Query("Companies");    q.include("Company");    q.get(Parse.User.current().get("Company").id, {success:function(company){            var companyLink = company.get("companyLink");            res.redirect('/'+companyLink);        }});        Parse.User.logOut();      }; //directs to profile needs user sessionexports.profile = function(req, res){	if(Parse.User.current() == null){      res.redirect('/');	  //IF USER IS A STAFF  }else if(Parse.User.current().get("Class") == "staff"){	  var user = Parse.User.current();	      res.render('staff_profile.ejs', { 			  user: user	      });	  //IF USER IS A CLIENT REDIRECT TO THE HOME FOR CLIENTS  }else if(Parse.User.current().get("Class") == "client"){	  var usrID = Parse.User.current().get("ClientID");	  var queryClients = new Parse.Query("Clients");	  queryClients.equalTo("objectId", usrID.id);	  queryClients.include("Company");	  queryClients.first({		  success: function(object){			  			  if(object.get("Status") == "Pending"){			  			  res.redirect("/pendingRegistration/" + object.get("Company").get("name").toLowerCase() );			  }else{	      			res.render('Clients/home.ejs', { user: object});	              }    			}	  });    }    else if(Parse.User.current().get("Class") == "agency")    {		var user = Parse.User.current();		var query = new Parse.Query("Agencies");		query.equalTo("objectId", user.get("AgencyID").id);		query.include("Company");		query.first({success: function(store){				if(store.get("Status") == "Pending")				{					res.redirect("/pendingRegistration/" + store.get("Company").get("name").toLowerCase() );				}				else				{  	      			res.render('agencies/agency_home.ejs', {user: user});				}			}});    }};//SETTINGSexports.agency_mainSettings = function(req, res){    var user = Parse.User.current();    var usrClass = Parse.User.current().get("Class");	if(!Parse.User.current() || usrClass === "client" || usrClass === "staff"){		 res.redirect('/login');			  }else{			  	var userAgency = user.get("AgencyID");			  	    userAgency.fetch({			  	        success: function(userAgency) {			  	    res.render('agencies/settings/agency_mainSettings.ejs', {user: user, agency: userAgency});			  	        }			  	    });		         	}				 };				 				 //profile CLIENT  exports.clientProfile = function(req, res){	var user = Parse.User.current();    var usrClass = Parse.User.current().get("Class");	  if(!Parse.User.current() || usrClass === "agency" || usrClass === "staff"){		  res.redirect('/login');				}else{		  var client = user.get("ClientID");			  client.fetch({			   success: function(client) {				 res.render('Clients/client_profile.ejs', {user: user, client: client});				 	 	        }				  	    });					       }				 			 };				 	 //displays clientsexports.settings_Clients = function(req, res){  var user = Parse.User.current();  var usrClass = Parse.User.current().get("Class");	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency") {	  res.redirect('/');		  }else{		  var queryClients = new Parse.Query("Clients");		  queryClients.descending('createdAt');		  queryClients.find({		  success: function(results){		  	res.render('settings/settings_Clients.ejs', { 		  	clients: results,				user: user	   		 });	   		    }	   		});		   	   }		   	   };						  														 		    //REGISTRATIONS				   // Signs up a new user and data validation  exports.clientReg = function(req, res) {     var usrFullName = req.body.usrFullName;     var usrCompany= req.body.usrCompany;	 var usrCountry = req.body.usrCountry;     var usrState = req.body.usrState;	 var usrCity = req.body.usrCity;	 var usrDestination = req.body.usrDestination;	 var usrAddress = req.body.usrAddress;	 var usrAddress2 = req.body.usrAddress2;	 var usrLanguage = req.body.usrLanguage;	 var usrID1 = req.body.usrID1;	 var usrID2 = req.body.usrID2;	 var usrTel = req.body.usrTel;	 var reg_email = req.body.usrEmail;	 var atpos = reg_email.indexOf("@");	 var dotpos = reg_email.lastIndexOf(".");     var usrNotes = req.body.usrNotes;				  	//not null name				   	if(usrFullName == "" || usrFullName == null || usrFullName.length<2){				   	  res.redirect('/1');				     //not null company				 	}else if(usrCompany == "" || usrCompany == null){				  	  res.redirect('/2');				 	//not null username				 	}else if(usrCountry == "" || usrCountry == null){				  	  res.redirect('/3');				 	//not null STATE				 	}else if(usrState == "" || usrState == null){				 	  res.redirect('/4');				 	//not null city				  	}else if(usrCity == "" || usrCity == null){				 	  res.redirect('/5');				 	//not null Destination				 	}else if(usrDestination == "" || usrDestination == null){				 	  res.redirect('/6');				     //not null Address						 	}else if(usrAddress == "" || usrAddress == null){				 	  res.redirect('/7');				 	 //not null usrID1				 	}else if(usrID1 == "" || usrID1 == null){				 	  res.redirect('/8');				 	//not null Tel				     }else if(usrTel == "" || usrTel == null){				       res.redirect('/9');				 	//not null email				     }else if(reg_email == "" || reg_email == null){				  	  res.redirect('/10');				    //valid email				  	}else if(atpos < 1 || ( dotpos - atpos < 2 )) {				  	  res.redirect('/11');				  	//not null password				  	}else{ 			//Create Client Object Client class and client is the new instance of the class				  var Client = Parse.Object.extend("Clients");				  var client = new Client();				 	//Save Client				 	  client.save({				 	    Name: usrFullName,				 	    Company: usrCompany,				 		Country: usrCountry,				 	    State: usrState,				 		City: usrCity,				 		Destination: usrDestination,				 		Address: usrAddress,				 	    Address2: usrAddress2,				 	    Language: usrLanguage,				 	    ID1: usrID1,				 	    ID2: usrID2,				 		Telephone: usrTel,				 		Email: reg_email,				 		Status: "Pending",				 		Notes: usrNotes				 	  }, {				 	    success: function(post) {				 			res.redirect("/pendingRegistration");				 	    },				 	    error: function(post, error) {				 	      // The save failed.				 	      // error is a Parse.Error with an error code and message.				 	    }				 	  }); 				 	}				 };// Signs up a new Agency and data validationexports.agencyReg = function(req, res) {	var agName = req.body.agName;    var agCountry = req.body.agCountry;    var agState = req.body.agState;	var agCity = req.body.agCity;    var agZip = req.body.agZip;	var agDestination = req.body.agDestination;	var agAddress = req.body.agAddress;	var agAddress2 = req.body.agAddress2;	var agPoBox = req.body.agPoBox;	var agPoBoxId = req.body.agPoBoxId;	var agLanguage = req.body.agLanguage;	var agID1 = req.body.agID1;	var agID2 = req.body.agID2;	var agTel = req.body.agTel;	var agWebsite = req.body.agWebsite;	var reg_email = req.body.agEmail;	var atpos = reg_email.indexOf("@");	var dotpos = reg_email.lastIndexOf(".");	var agNotes = req.body.agNotes;	//not null name	if(agName == "" || agName == null || agName.length<2){		res.redirect('/register');		 //not null country		}else if(agCountry == "" || agCountry == null){			  res.redirect('/register');			   	//not null STATE			   	}else if(agState == "" || agState == null){			   	  res.redirect('/register');			   	//not null city			    	}else if(agCity == "" || agCity == null){			   	  res.redirect('/register');			   	//not null Destination			   	}else if(agDestination == "" || agDestination == null){			   	  res.redirect('/register');			       //not null Address					   	}else if(agAddress == "" || agAddress == null){			   	  res.redirect('/register');			   	 //not null usrID1			   	}else if(agID1 == "" || agID1 == null){			   	  res.redirect('/register');			   	//not null Tel			       }else if(agTel == "" || agTel == null){			         res.redirect('/register');			   	//not null ZIP CODE			       }else if(agZip == "" || agZip == null){			         res.redirect('/register');			   	//not null email			       }else if(reg_email == "" || reg_email == null){			    	  res.redirect('/register');			      //valid email			    	}else if(atpos < 1 || ( dotpos - atpos < 2 )) {			    	  res.redirect('/register');			    	//not null password			    	}else{ 				   	   //Create Client Object Client class and client is the new instance of the class			   	    var Agency = Parse.Object.extend("Agencies");			   	    var agency = new Agency();			   	//Save Client			   	  agency.save({			   	    Name: agName,			   		Country: agCountry,			   	    State: agState,			   		City: agCity,			   		Destination: agDestination,			   		Address: agAddress,			   	    Address2: agAddress2,			   		ZIP: agZip,			   	    Language: agLanguage,			   	    ID1: agID1,			   	    ID2: agID2,			   		PoBox: agPoBox,			   		PoBoxId: agPoBoxId,			   		Telephone: agTel,			   		Website: agWebsite,			   		Email: reg_email,			   		Status: "Pending",			   		Notes: agNotes			   	  }, {			   	    success: function(post) {			   			res.redirect("/pendingRegistration");			   	    },			   	    error: function(post, error) {			   	      // The save failed.			   	      // error is a Parse.Error with an error code and message.			   	    }			   	  }); 			   	}			   };			   			   //staff list to edit or delete staff membersexports.addStaffSection = function(req, res){   var usrClass = Parse.User.current().get("Class");	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){  		res.redirect('/login');	  			}else{		var user = Parse.User.current(); 		var	company = user.get("Company");			company.fetch({			 success: function(company){			  	var company = user.get("Company");			  		 res.render('settings/addstaff.ejs', {company: company});			  			 }			  		 });			  	 }			};	// ADD STAFF MEMBERSexports.addStaff= function(req, res) {		var staffName = req.body.staffName;		var staffJobPosition = req.body.staffJobPosition;		var staffDivision = req.body.staffDivision;		var staffAddress = req.body.staffAddress;		var staffTelephone = req.body.staffTelephone;		var staffCellphone = req.body.staffCellphone;		var staffUsername = req.body.staffUsername;		var staffPassword = req.body.staffPassword;		var company = Parse.User.current().get("Company");		var companyLink = req.body.link;		var username = staffUsername+"@"+companyLink;		var staffConPassword = req.body.staffConPassword;		var staffEmail = req.body.staffEmail;		var atpos = staffEmail.indexOf("@");		var dotpos = staffEmail.lastIndexOf(".");		var geocode = req.body.geocodedata;				     //not null name		if(staffName == "" || staffName == null || staffName.length<2){			res.redirect('/addStaff');		  //not null Position			}else if(staffJobPosition == "" || staffJobPosition == null){			 res.redirect('/addStaff');		  //not null Telephone		    }else if(staffTelephone == "" || staffTelephone == null){			 res.redirect('/addStaff');		  //not null Username			}else if(staffUsername == "" || staffUsername == null){			 res.redirect('/addStaff');		  //not null Password				}else if(staffPassword == "" || staffPassword == null){			  res.redirect('/addStaff');		  //not null or dirrerent Password Confirmation			}else if(staffConPassword == "" || staffConPassword == null || staffConPassword != staffPassword){			  res.redirect('/addStaff');	      //not null email			}else if(staffEmail == "" || staffEmail == null){			  res.redirect('/addStaff');		   //valid email			}else if(atpos < 1 || ( dotpos - atpos < 2 )) {			  res.redirect('/addStaff');			  	}else{			 //Add Staff			  var Staff = Parse.Object.extend("Staff");			  var staff = new Staff();			     //Save Staff in Staff Table			  		 	staff.save({			  		 	  Name: staffName,			  		      Position: staffJobPosition,			  		 	  Division: staffDivision,			  		      Address: staffAddress,			  			  Telephone: staffTelephone,			  			  Cellphone: staffCellphone,			  		      GeoCode: geocode				  		 	  }, {			  		 	    success: function(post) {			  				    var user = new Parse.User();			  				    user.set('username', username);			  					user.set('email', staffEmail);			  				    user.set('password', staffPassword);			  					user.set('Class', "staff");			  					user.set('StaffId', post);			  				    user.set("Company", company);			  				    user.save();			  				    res.redirect('staff_staffList');				  		 	    },			  		 	    error: function(post, error) {			  		 	      // The save failed.			  		 	      // error is a Parse.Error with an error code and message.			  		 	    }			  		 	  }); 			  		 	}			  		 };				 		 	  //staff list to edit or delete staff membersexports.staff_staffList = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");		if(!Parse.User.current() || usrClass === "client" || usrClass === "agency") {		res.redirect('/');			}else{		Parse.Cloud.useMasterKey();		var queryStaffs = new Parse.Query("User");		    queryStaffs.include("StaffId");			queryStaffs.include("Company");				queryStaffs.equalTo("Company", user.get("Company"));			queryStaffs.equalTo("Class", "staff");		    queryStaffs.find().then(function(results) {				res.render('settings/staffList.ejs', { 			staffs: results				    });				});			 }		};								 								          //WAREHOUSE RESPONSIVEexports.staff_Warehouse = function(req, res){    	var user = Parse.User.current();            if(user == null)    {        res.redirect('/');        return;    }    	if(!Parse.User.current() || user.get("Class") === "client" || user.get("Class") === "agency"){			res.redirect('/');	}else{        res.render("Staff/Warehouses/Labels.ejs", {user:user, results:[], params:req.body});        return;                /*var nowbegin = new Date(moment(new Date() ));        var nowend = new Date(moment(new Date() ));                nowend.setDate(nowend.getDate() + 2);        nowend.setHours(23, 59);        */            req.body["document"] = "Staff/Warehouses/Labels";        req.body["conditions"] = {                                    containedIn:{"Status":["Received","NotProcessed"]},                                    //greaterThanOrEqualTo: {'ReceiptDate' : {__type:"Date", iso:moment( nowbegin ).format("MM[/]DD[/]YYYY")}},                                    //lessThanOrEqualTo: {'ReceiptDate' : {__type:"Date", iso:nowend}},                                    equalTo:{"Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }                                  };                req.body["collection"] = "Receipts";        req.body["cols"] = {                            "ReceiptNum":"",                            "Consignee":{"Name":"", "Country":"Country"}, /*This is the sintax for return fields of pointers showed on table*/                            //"Consignee":{"Country":"Country"}, /*This is the sintax for return fields of pointers showed on table*/                            "Shipper":{"Name":""}, /*This is the sintax for return fields of pointers showed on table*/                            "ReceiptDate":"Date",                            "Destination":"",                            "Warehouse":{Name:""},                            "TotalBoxes":"",                            "PackedBoxes":"",                            "Transport":"",			                "Shipment":"",			                "Weight":"",			                "Status":"",                            "objectId":"",                            "PackedBoxes":""                        };                search(req, res);	}};//REPACK LIST RESPONSIVEexports.staff_repackList = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');	}else{        res.render("Staff/Warehouses/repackList.ejs", {user:user, results:[], params:req.body});        return;        var nowbegin = new Date();        var nowend = new Date();        nowend.setHours(23, 59);        req.body["document"] = "Staff/Warehouses/repackList";        req.body["conditions"] = {                                    containedIn:{"Status":["Repack"]},                                    greaterThanOrEqualTo: {'ReceiptDate' : {__type:"Date", iso:moment( nowbegin ).format("MM[/]DD[/]YYYY")}},                                    lessThanOrEqualTo: {'ReceiptDate' : {__type:"Date", iso:nowend}},                                    equalTo:{"Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }                                  };                req.body["collection"] = "Receipts";        req.body["cols"] = {                            "ReceiptNum":"",                            "RepackConsignee":{"Name":"", "Country":"Country"}, /*This is the sintax for return fields of pointers showed on table*/                            //"Consignee":{"Country":"Country"}, /*This is the sintax for return fields of pointers showed on table*/                            "RepackShipper":{"Name":""}, /*This is the sintax for return fields of pointers showed on table*/                            "ReceiptDate":"Date",                            "Destination":"",                            "Warehouse":{Name:""},                            "TotalBoxes":"",                            "PackedBoxes":"",                            "Transport":"",			                "Shipment":"",			                "Status":"",                            "objectId":"",                            "PackedBoxes":""                        };                search(req, res);	}};              //THE RESPONSIVE REPACK SECTIONexports.staff_Repack = function(req, res){    var usrClass = Parse.User.current().get("Class");    var user = Parse.User.current();    if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){        res.redirect('/');    }else{                req.body["document"] = "Staff/Warehouses/Repack";        req.body["conditions"] = {equalTo:{"Status":"Received"}};        req.body["collection"] = "Warehouses";        req.body["cols"] = {                            "Receipt":"",                            "Zone":"", /*This is the sintax for return fields of pointers showed on table*/                            "ReceiptDate":"",                            "Country":"",                            "Invoice":"",                            "Transport":"",			                "Volume":"",                            "Warehouse":"",                            "objectId":""                        };                                search(req, res);    }};//IN TRANSITexports.staff_sending=  function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');	}else{        req.body["document"] = "Staff/transit/sending";        req.body["conditions"] = {//contains:{"Status":"TransferOut"},                                equalTo:{"Status":"TransferOut", "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }                                  };        //req.body["like"] = {"Status":"TransferOut"};                req.body["collection"] = "Receipts";        req.body["cols"] = {                            "ReceiptNum":"",                            "Consignee":{"Name":""}, /*This is the sintax for return fields of pointers showed on table*/                            "ReceiptDate":"",                            "Warehouse":{"Name":""},			                "Shipment":"",			                "Status":"",			                "TransferTo":{"Name":""},                            "objectId":""                        };                search(req, res);	}};exports.staff_storestransit=  function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');	}else{        req.body["document"] = "Staff/transit/storestransit";        //req.body["conditions"] = {containedIn:{"Status":["InTransfer"]} };        //req.body["like"] = {"Status":"Los Angeles"};                //ESTA CONDICION ESTA MAL, ES NADAMAS PARA QUE NO SLAGA VACIO ESTA SECCION QUE CREO SE VA A MEZCLAR        req.body["conditions"] = {                                equalTo:{"Status":"StoreInTransit", "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }                                  };                        req.body["collection"] = "Receipts";        req.body["cols"] = {                            "ReceiptNum":"",                            "Consignee":{"Name":""}, /*This is the sintax for return fields of pointers showed on table*/                            "Shipper":{"Name":""}, /*This is the sintax for return fields of pointers showed on table*/                            "ReceiptDate":"",                            "Country":"",                            "Warehouse":{"Name":""},                            "Invoice":"",                            "Transport":"",			                "Shipment":"",			                "Status":"",                            "objectId":""                        };                search(req, res);	}};//NEWLABEL RESPONSIVEexports.staffNewLabel = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');			  }else{	 res.render('Staff/Warehouses/NewLabel.ejs', {user:user, correction: "n", params:{"message":""},	  user: user});}};//NEWLABEL FLOATINGexports.newlabelFloat = function(req, res){      res.render('Staff/Warehouses/NewLabel.ejs', {correction: "y", message:""});};//STAFF CLIENTS PROFILE RESPONSIVE exports.staff_clientProfile = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){		    res.redirect('/login');		}else{			res.render('Staff/Clients/Profiles.ejs', {user: user});		}		   };//STAFF ACTIVE CLIENTS RESPONSIVEexports.activeClients = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {			res.redirect('/');	}    else    {        req.body["document"] = "Staff/Clients/Actives";        req.body["collection"] = "Clients";        req.body["conditions"] = {equalTo: {'Status' : "Active",                                             "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }};        req.body["cols"] = {                            "Name":"",                            "Country":"",                             "Company":{"Name":""},                            "Address":"",                            "Telephone":"",                            "Email":"",                            "Destination":"",                            "objectId":""			                                };                search(req, res);	}};//Register a Client from a Staff sessionexports.staff_consigneeReg = function(req, res){  var usrClass = Parse.User.current().get("Class");  var user = Parse.User.current();if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")  {		res.redirect('/');}  else  {	res.render('Staff/Clients/consigneeReg.ejs', {user: user});}};//STAFF PENDING CLIENTS RESPONSIVEexports.pendingClients = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {			res.redirect('/');	}    else    {        req.body["document"] = "Staff/Clients/Pendings";        req.body["collection"] = "Clients";        req.body["conditions"] = {equalTo:{'Status' : "Pending",                                            "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }};                        req.body["cols"] = {                            "Name":"",                            "Country":"",                             "Company":{"name":""},                            "Address":"",                            "Telephone":"",                            "Email":"",                            "Destination":"",                            "objectId":""                        };                search(req, res);	}}; //STAFF INACTIVE CLIENTS RESPONSIVEexports.inactiveClients = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {			res.redirect('/');	}    else    {        req.body["document"] = "Staff/Clients/inactive";        req.body["collection"] = "Clients";        req.body["conditions"] = {notContainedIn: {'Status' : ["Active", "Pending"]},                                    equalTo:{"Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }};                        req.body["cols"] = {                            "Name":"",                            "Country":"",                             "Company":{"name":""},                            "Address":"",                            "Telephone":"",                            "Email":"",                            "Destination":"",                            "objectId":""                        };                search(req, res);	}}; //STAFF CLIENTS RESERVATIONS RESPONSIVEexports.reservations = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {			res.redirect('/');	}    else    {        req.body["document"] = "Staff/Clients/Reservations";        req.body["collection"] = "Reservations";        req.body["conditions"] = {equalTo:{"Status":"TransferOut:Los Angeles"}};                req.body["cols"] = {                            "Status":"",                            "ClientName":"",                             "Arrival":"",                            "Departure":"",                            "Airline":"",                            "Flight":"",                            "Telephone":"",                            "Destination":""                        };                search(req, res);	}};//STAFF AGENCIES SECTION RESPONSIVEexports.staff_agencyProfile = function(req, res){ 	var user = Parse.User.current(); 	var usrClass = Parse.User.current().get("Class");        if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {        res.redirect('/login');    }    else    {        res.render('Staff/Agencies/Profiles.ejs', {user: user});    }};                           //renders and display active agencies	   exports.activeAgencies = function(req, res){    var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {			res.redirect('/');	}    else    {        req.body["document"] = "Staff/Agencies/Actives";        req.body["collection"] = "Agencies";        req.body["conditions"] = {equalTo: {'Status' : "Active",                                    "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id}} };                                            req.body["cols"] = {                            "Name":"",                            "Website":"",                             "Address":"",                            "Country":"",                            "State":"",                            "Telephone":"",                            "Email":""                        };                search(req, res);	}};		   //renders and display pending agencies	   exports.pendingAgencies = function(req, res){    var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');	}else{        req.body["document"] = "Staff/Agencies/Pendings";        req.body["collection"] = "Agencies";        req.body["conditions"] = {equalTo:{'Status' : "Pending",                                         "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} } };        req.body["cols"] = {                            "Name":"",                            "Website":"",                             "Address":"",                            "Country":"",                            "State":"",                            "Telephone":"",                            "Email":"",                            "objectId":""                        };                search(req, res);	}};//renders and display pending agencies	   exports.inactiveAgencies = function(req, res){    var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');	}else{        req.body["document"] = "Staff/Agencies/inactives";        req.body["collection"] = "Agencies";        req.body["conditions"] = {notContainedIn: {'Status' : ["Active", "Pending"]},                                    equalTo:{"Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} } };        req.body["cols"] = {                            "Name":"",                            "Website":"",                             "Address":"",                            "Country":"",                            "Telephone":"",                            "Email":"",                            "objectId":""                        };                search(req, res);	}};exports.activateAgency = function(req, res){    var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {        res.redirect('/');	}    else    {        agencyID = req.body.agencyID;                var query = new Parse.Query("Agencies");                query.equalTo('objectId', agencyID);                query.get(agencyID,             {            success:                function(object)                {                    object.set("Status", "Active");                    object.save();                                        req.body["document"] = "Staff/Agencies/Actives";                    req.body["collection"] = "Agencies";                    req.body["conditions"] = {equalTo: {'Status' : "Active",                                                "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id}} };                                                                    req.body["cols"] = {                                        "Name":"",                                        "Website":"",                                         "Address":"",                                        "Country":"",                                        "State":"",                                        "Telephone":"",                                        "Email":""                                    };                                        search(req, res);                                    }            });            }};        exports.activateClient = function(req, res){    var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")    {        res.redirect('/');	}    else    {        clientID = req.body.clientID;        var query = new Parse.Query("Clients");                query.get(clientID,             {            success:                function(object)                {                    object.set("Status", "Active");                    object.save();                                        req.body["document"] = "Staff/Clients/Actives";                    req.body["collection"] = "Clients";                    req.body["conditions"] = {equalTo: {'Status' : "Active",                                                         "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }};                    req.body["cols"] = {                                        "Name":"",                                        "Country":"",                                         "Company":"",                                        "Address":"",                                        "Telephone":"",                                        "Email":"",                                        "Destination":"",                                        "objectId":""                                                                    };                                        search(req, res);                                    }            });            }};//AIR RESPONSIVEexports.staff_airSectionNP = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");        if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" )    {      res.redirect('/');    }    else    {        req.body["document"] = "Staff/Air/NotProcessed";        req.body["collection"] = "Receipts";        req.body["conditions"] = {containedIn:{"Status":["Repack"]},                                        equalTo:{Shipment:"Aereal",                                            "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }};                req.body["cols"] = {                            "ReceiptNum":"",                            Consignee:{"Name":""},                             "Weight":"",                            "TotalBoxes":"",                            "Agent":"",                            "Content":"",                            "Value":"",                            "objectId":""                        };                search(req, res);            }};		   //air Processedexports.staff_airSectionP = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");        if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" )    {      res.redirect('/');    }    else    {        req.body["document"] = "Staff/Air/Processed";        req.body["collection"] = "Receipts";        req.body["conditions"] = {equalTo:{Shipment:"Aereal", "Status":"Processed",                                            "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }};        req.body["cols"] = {                            "ReceiptNum":"",                            Consignee:{"Name":""},                             "Weight":"",                            "TotalBoxes":"",                            "Agent":"",                            "Content":"",                            "objectId":""                        };                search(req, res);    }};exports.staff_terrestralSectionNP = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");        if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" )    {      res.redirect('/');    }    else    {        req.body["document"] = "Staff/Terrestral/NotProcessed";        req.body["collection"] = "Receipts";        req.body["conditions"] = {containedIn:{"Status":["Repack"]},                                        equalTo:{Shipment:"Terrestral",                                            "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }};        req.body["cols"] = {                            "ReceiptNum":"",                            Consignee:{"Name":""},                             "Weight":"",                            "Volume":"",                            "Agent":"",                            "Content":"",                            "TotalBoxes":"",                            "objectId":""                        };                search(req, res);    }};exports.staff_terrestralSectionP = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");        if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" )    {      res.redirect('/');    }    else    {        req.body["document"] = "Staff/Terrestral/Processed";        req.body["collection"] = "Receipts";        req.body["conditions"] = {equalTo:{Shipment:"Terrestral", "Status":"Processed",                                            "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }};        req.body["cols"] = {                            "ReceiptNum":"",                            Consignee:{"Name":""},                             "Weight":"",                            "Volume":"",                            "Agent":"",                            "TotalBoxes":"",                            "Content":"",                            "objectId":""                        };                search(req, res);    }};exports.staff_seaSectionNP = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");        if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" )    {      res.redirect('/');    }    else    {        req.body["document"] = "Staff/Sea/NotProcessed";        req.body["collection"] = "Receipts";        req.body["conditions"] = {containedIn:{"Status":["Repack"]},                                        equalTo:{Shipment:"Sea",                                            "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }};        req.body["cols"] = {                            "ReceiptNum":"",                            Consignee:{"Name":""},                             "Weight":"",                            "Volume":"",                            "Agent":"",                            "TotalBoxes":"",                            "Content":"",                            "objectId":""                        };                search(req, res);    }};exports.staff_seaSectionP = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");        if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" )    {      res.redirect('/');    }    else    {        req.body["document"] = "Staff/Sea/Processed";        req.body["collection"] = "Receipts";        req.body["conditions"] = {equalTo:{Shipment:"Sea", "Status":"Processed",                                            "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }};        req.body["cols"] = {                            "ReceiptNum":"",                            Consignee:{"Name":""},                             "Weight":"",                            "Volume":"",                            "Agent":"",                            "TotalBoxes":"",                            "Content":"",                            "objectId":""                        };                search(req, res);    }};// get a single object ... subject to change to generic object factoryexports.getby = function(req, res){    var user = Parse.User.current();    var usrClass = Parse.User.current().get("Class");    //Permisions to visit section of the page    if(!Parse.User.current() || usrClass === "client")    {        res.send(JSON.stringify("Bad session"));    }    else    {        //variables que vienen por POST        var by = req.body.by;        var value = req.body.value;        var classvar = req.body.classvar;                        var query = new Parse.Query(classvar);        query.descending('createdAt');        query.equalTo(by, value);        query.first(        {            success:                 function(results)                {                    res.send(JSON.stringify(results));                }        });                        }};// get a list of results over one single table or classvarexports.searchby = function(req, res){    var user = Parse.User.current();    var usrClass = Parse.User.current().get("Class");    //Permisions to visit section of the page    if(!Parse.User.current() || usrClass === "client")    {        res.send(JSON.stringify("Bad session"));    }    else    {        search(req, res, false);    }};function searchfilter(results, like){	    //en este arreglo almacenaremos el resultado filtrado    var resultfilter = [];	        //OLD WORK	       var likefield = 0;        for(i in like) likefield = i;        if(likefield == "All")        return results;    //~OLD WORK        //recorrer la lista de objetos en el resultado    for (var i = 0; i < results.length; i++)    {        var object = results[i];        var addreg = false;                //recorrer todos los campos de busqueda like        //for(likefield in like)        //{                        if(likefield == "All")            {                continue;            }                        //obtenemos el valor de este objeto en el campo de busqueda            var field = object.get(likefield);                        if(typeof field == "undefined")                continue;                        var searchtext = "";            if(typeof like[likefield] == "object")            {                                    for(j in like[likefield])                {                    field = field.get(j);                    searchtext = like[likefield][j];                }                                //minusculas                 field = field.toLowerCase();                searchtext = searchtext.toLowerCase();                                //verificar si contiene el texto que buscamos                if(field.search(searchtext) != -1)                {                    addreg = true;                }            }            else if(typeof field == "number" )            {                searchtext = parseInt(like[likefield]);                                if(searchtext == field)                {                    addreg = true;                }            }            else             {                searchtext = like[likefield];                                //minusculas                 field = field.toLowerCase();                searchtext = searchtext.toLowerCase();                                //verificar si contiene el texto que buscamos                if(field.search(searchtext) != -1)                {                    addreg = true;                }            }        //}                if(addreg)        {            resultfilter.push(object);        }            }        return resultfilter;}function search(req, res, norender){        kwargs = req.body;        //variables que vienen por POST    var by = kwargs["by"];    var value = kwargs["value"];    var collection = kwargs["collection"];    var cols = kwargs["cols"];    var conditions = req.body.conditions;        var query = new Parse.Query(collection);        query.descending('createdAt');        for(col in cols)    {        if(typeof cols[col] == "object")            query.include(col);    }            //CONDICIONES    if(typeof conditions != "undefined")    {        for(fieldcondition in conditions)        {                                    for(field in conditions[fieldcondition])            {                condition_obj = conditions[fieldcondition][field];                                if(fieldcondition == "containedIn")                {                    query.containedIn(field, condition_obj);                    continue;                }                else if(fieldcondition == "notContainedIn")                {                    query.notContainedIn(field, condition_obj);                    continue;                }                                if(typeof condition_obj == "object")                {                    if(condition_obj.__type == "Date")                        condition_obj = new Date(condition_obj.iso);                }                                    if(fieldcondition == "equalTo")                    query.equalTo(field, condition_obj);                                    else if(fieldcondition == "contains")                    query.contains(field, condition_obj);                                    else if(fieldcondition == "notEqualTo")                    query.notEqualTo(field, condition_obj);                                    else if(fieldcondition == "greaterThan")                    query.greaterThan(field, condition_obj);                                    else if(fieldcondition == "lessThan")                    query.lessThan(field, condition_obj);                                    else if(fieldcondition == "greaterThanOrEqualTo")                    query.greaterThanOrEqualTo(field, condition_obj);                                    else if(fieldcondition == "lessThanOrEqualTo")                    query.lessThanOrEqualTo(field, condition_obj);                                                }        }    }            //FIXME ... REMOVE NEXT LINE WHEN CONDITIONS ARE STABLE !    if(typeof kwargs["by"] != "undefined")                query.equalTo(by, value);    if(typeof kwargs["orderby"] != "undefined")                query.ascending(kwargs["orderby"]);    query.find(    {        success: 		function(results){                if(typeof req.body['like'] != "undefined"){                    results = searchfilter(results, req.body.like);                    //req.body["debug"] = JSON.stringify(results);                }                                newresult = [];                                for(i in results)                {                    item = {};                                        for(col in cols)                    {                        add = true;                                                //special case for extract the object ID                        if(col == 'objectId')                        {                            item["objectId"] = results[i].id;                            continue;                        }                                                if(typeof(cols[col]) == "object")                        {                                   for(var it in cols[col])                            {                                if(typeof(results[i].get(col)) != "undefined")                                {                                    if(cols[col][it].length == 0)                                    {                                        item[col] = results[i].get(col).get(it);    //get the value of the pointed register value                                        //item[col] = cols[col][it].length; //results[i].get(col).get(it);    //get the value of the pointed register value                                    }                                    else                                    {                                        //item[it] = results[i].get(col).get(it);                                        //itm = {};                                        item[cols[col][it]] = results[i].get(col).get(it);                                        //newresult.push(itm);                                        //add = false;                                    }                                }                            }                        }                               else                        {                            /*if(results[i].get(col) == null)                            {                                item[col] = results[i].get(col);                            }*/                            //is a date the result?                            if(typeof(results[i].get(col)) == 'object' && results[i].get(col) != null)                            {                                //verify how the result date must be showed                                if(cols[col] == "Date")                                    item[col] = moment( new Date( results[i].get(col) ) ).format("MM[/]DD[/]YYYY");                                else //DAYS                                    item[col] = moment( new Date( results[i].get(col) ) ).fromNow();                            }                            else                                item[col] = results[i].get(col);                                                    }                                                    //item[col] = typeof item[col];                    }                                        //if(add)                        newresult.push(item);                }                                //res.send(JSON.stringify(newresult));                var user = Parse.User.current();                                if(typeof norender == "undefined")                {                    res.render(req.body.document + ".ejs", {user:user, results:newresult, params:req.body});                }                else                    res.send(JSON.stringify(newresult));                                                            },        error:            function(error)            {                ;            }    }    );};exports.getrendered = function(req, res){    user = Parse.User.current();    var usrClass = Parse.User.current().get("Class");    //Permisions to visit section of the page    if(!Parse.User.current() || usrClass === "client")    {        res.send(JSON.stringify("Bad session"));    }    else    {                if(typeof req.body["collection"] != "undefined")        {            search(req, res);        }        else if(typeof req.body["by"] != "undefined")        {            searchby(req, res);        }        else        {            var params;                        if(typeof req.body["params"] == "undefined")                params = {};            else                 params = req.body.params;                        res.render(req.body.document + ".ejs", {user:user, params:params });        }    }};exports.getrenderedby = function(req, res){    var user = Parse.User.current();    var usrClass = Parse.User.current().get("Class");    //Permisions to visit section of the page    if(!Parse.User.current() || usrClass === "client")    {        res.send(JSON.stringify("Bad session"));    }    else    {        //variables que vienen por POST        var by = req.body.by;        var value = req.body.value;        var collection = req.body.collection;                var query = new Parse.Query(collection);        if(by == "objectId")        {            query.get(value,            {                success:                     function(result)                    {                        res.render(req.body.document + ".ejs", {user:user, result:result });                    }            });                    }        else        {            query.equalTo(by, value);            query.first(            {                success:                     function(result)                    {                        res.render(req.body.document + ".ejs", {user:user, result:result });                    }            });        }                        }};//FOR TESTING PURPOSESexports.test = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();		if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {	                var queryWareHouse = new Parse.Query("WareHouse");                queryWareHouse.descending("Receipt");                queryWareHouse.first().then(                    function(result)                    {                                                var r = result.get("Receipt");                                                if( typeof r == "undefined")                        {                            r = 1;                        }                        else                        {                            r = r+1;                        }                                                res.render("debug.ejs", {vardump:JSON.stringify(r)});                        return;                                            }                );                        //res.render("debug.ejs", {vardump:JSON.stringify([req.body, "BAD QUERY"])});        //return;    }}// insert a new register with them pointersexports.extends = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();		if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {	                var pointers = [];        var inc_field = "";                for(i in req.body.values)        {            if(typeof req.body.values[i] == 'object')            {                if(req.body.values[i].__type == "Date")                {                    req.body.values[i] = new Date(req.body.values[i].iso);                }                else if(req.body.values[i].__type == "Autoincrement")                {                                        inc_field = i;                }                else                    //save as a pointer                    pointers[i] = req.body.values[i];            }        }                        var newcollection = Parse.Object.extend(req.body.collection);        var collection = new newcollection();        for(i in pointers)            collection.set(i, pointers[i]);        if(inc_field != "")        {            //the increment            var query = new Parse.Query(req.body.collection);            query.descending(inc_field);                        query.first().then(                        function(result)                        {                            if(typeof result == "undefined")                            {                                req.body.values[inc_field] = 1;                            }                            else                            {                                req.body.values[inc_field] = result.get(inc_field)+1;                            }                                                        //Save                            collection.save(req.body.values, {                                success: function(newreg)                                 {                                    if(typeof req.body["pointed_by"] != "undefined")                                    {                                        var pointers = req.body.pointed_by;                                                                                //UPDATE THE OBJECTS THAT POINT TO THIS NEW REGISTER                                        for(objclass in pointers)                                        {                                                                                        for(fieldpoint in pointers[objclass])                                            {                                                   var items = pointers[objclass][fieldpoint];                                                for(item in items)                                                {                                                    var theObj = Parse.Object.extend(objclass);                                                    var theobj = new theObj();                                                                                                        theobj.id = items[item];                                                    theobj.set(fieldpoint, newreg);                                                                                                        //REQUEST FOR UPDATE ANOTHER FIELDS OF THE POINTED REGISTER?                                                    if(typeof req.body["pointed_update"] != "undefined")                                                    {                                                        //UPDATE ALL FIELDS SPECIFIED BY pointed_update                                                        for(i in req.body.pointed_update)                                                            for(j in req.body.pointed_update[i])                                                                theobj.set(j, req.body.pointed_update[i][j]);                                                    }                                                                                                        theobj.save();                                                }                                            }                                        }                                    }                                                                                                            if(typeof req.body.document != "undefined")                                        res.render(req.body.document + ".ejs", {user:user, params:req.body, newreg:newreg });                                    else                                         res.send(JSON.stringify(req.body) );                                },                                error: function(post, error)                                 {                                    // The save failed.                                    // error is a Parse.Error with an error code and message.                                }                            });                                                                                 }                    );        }        else        {                                    //Save            collection.save(req.body.values, {                success: function(post)                 {                    //res.render(req.body.document + ".ejs", {user:user, params:req.body.params });                },                error: function(post, error)                 {                    // The save failed.                    // error is a Parse.Error with an error code and message.                }            });                        if(typeof req.body.document != "undefined")                res.render(req.body.document + ".ejs", {user:user, params:req.body });            else                 res.send(JSON.stringify(req.body) );                    }    }       			};exports.update = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();		if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {	                var objclass = req.body["collection"];        var objectId = req.body["objectId"];        var values = req.body["values"];                var ObjClass = Parse.Object.extend(objclass);        var obj = new ObjClass();                obj.id = objectId;        for(i in values)        {            obj.set(i, values[i]);        }        obj.save();                res.send(JSON.stringify(req.body) );    }};exports.deleterow = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();		if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {	                var Obj = Parse.Object.extend(req.body["collection"]);                var query = new Parse.Query(Obj);                query.get(req.body["objectId"], {            success:                 function(myObj)                {                    myObj.destroy({});                    res.send(JSON.stringify(req.body) );                },            error:                 function(object, error)                {                    // The object was not retrieved successfully.                    // error is a Parse.Error with an error code and description.                }            });    }};//AGENCIES (STORES) SECTIONexports.agency_newLabel= function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client" || usrClass === "staff"){			res.redirect('/');	}else if(usrClass === "agency"){		 res.render('agencies/labels/agencies_newLabel.ejs', {correction: "n", params:{"message":""},		 user: user});  }else{	  res.redirect('/');}};exports.agency_store= function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client" || usrClass === "staff"){			res.redirect('/');	}else if(usrClass === "agency"){		res.render('agencies/agency_store.ejs');  }else{	  res.redirect('/');}};exports.agency_profile= function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!user || usrClass ==="client" || usrClass === "staff"){		res.redirect('/');	}else if(usrClass === "agency"){				var currentUser = Parse.User.current();		var agency = currentUser.get("AgencyID");				    agency.fetch({		        success: function(store) {	  		      res.render('agencies/agency_profile.ejs', {	  				  store: store	  		      });				        }		    });}else{ res.redirect('/');}};exports.agency_labels= function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!user || usrClass ==="client" || usrClass === "staff")    {		res.redirect('/');	}    else if(usrClass === "agency")    {                    req.body["document"] = "agencies/labels/Labels";        //req.body["conditions"] = {containedIn:{"Status":["Repack","Received","NotProcessed"]} };                req.body["collection"] = "StoreLabels";        req.body["cols"] = {                            "ReceiptNum":"",                            "Consignee":{"Name":""}, /*This is the sintax to return fields of pointers showed on table*/                            "Shipper":{"Name":""}, /*This is the sintax to return fields of pointers showed on table*/                            "ReceiptDate":"Date",                            "Country":"",                            "Warehouse":"",                            "Invoice":"",                            "Transport":"",			                "Shipment":"",			                "Status":"",                            "objectId":""                        };                search(req, res);    }    else    {        res.redirect('/');    }};exports.agency_pending = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!user || usrClass ==="client" || usrClass === "staff")    {		res.redirect('/');	}    else if(usrClass === "agency")    {                    req.body["document"] = "agencies/Records/Pending/Labels";        req.body["conditions"] = {equalTo:{"Status":"StoreInTransit",                                        "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id}                                } };                req.body["collection"] = "Receipts";        req.body["cols"] = {                            "ReceiptNum":"",                            "Consignee":{"Name":""}, /*This is the sintax to return fields of pointers showed on table*/                            "Shipper":{"Name":""}, /*This is the sintax to return fields of pointers showed on table*/                            "ReceiptDate":"Date",                            "Destination":"",                            "Warehouse":{"Name":""},                            "Invoice":"",                            "Transport":"",			                "Shipment":"",			                "Status":"",                            "objectId":""                        };                search(req, res);    }    else    {        res.redirect('/');    }};exports.agency_sent = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!user || usrClass ==="client" || usrClass === "staff")    {		res.redirect('/');	}    else if(usrClass === "agency")    {                    req.body["document"] = "agencies/Records/Sent/Labels";        req.body["conditions"] = {equalTo:{"Status":"Received",                                        "Shipper":{__type: "Pointer", className: "Agencies", objectId: user.get("AgencyID").id},                                        "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id}                                } };                req.body["collection"] = "Receipts";        req.body["cols"] = {                            "ReceiptNum":"",                            "Consignee":{"Name":""}, /*This is the sintax to return fields of pointers showed on table*/                            "Shipper":{"Name":""}, /*This is the sintax to return fields of pointers showed on table*/                            "ReceiptDate":"Date",                            "Destination":"",                            "Warehouse":{"Name":""},                            "Invoice":"",                            "Transport":"",			                "Shipment":"",			                "Status":"",                            "objectId":""                        };                search(req, res);    }    else    {        res.redirect('/');    }};exports.pointofsale = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "staff"){			res.redirect('/');	}    else if(usrClass === "agency")    {        res.render("agencies/pointofsale.ejs");	}    else    {        res.redirect('/');    }};exports.inventory = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    	if(!Parse.User.current() || usrClass === "client" || usrClass === "staff"){			res.redirect('/');	}    else if(usrClass === "agency")    {        req.body["document"] = "agencies/inventory";        //req.body["conditions"] = {equalTo:{"Store":{__type: "Pointer", className: "Agencies", objectId: user.get("AgencyID").id} } };                req.body["collection"] = "Inventories";        req.body["cols"] = {                            "Key":"",                            "Name":"",                             "Prices":"",                             "Existence":"",                             "Max":"",                             "Min":"",                             "Tags":"",                            "objectId":""                         };                search(req, res);        	}    else    {        res.redirect('/');    }};// Subscribes a new Company  exports.subscribeCompany = function(req, res) {     var companyName = req.body.companyName;     var companyAddress = req.body.companyAddress;	 var companyLink = req.body.companyLink;     var contactEmail = req.body.contactEmail;	 var contactPhone = req.body.companyPhone;     var companyWebsite = req.body.companyWebsite;	 var rootFullName = req.body.rootFullName;	 var rootEmail = req.body.rootEmail;	 var rootusrName = req.body.rootUsrname;	 var rootPassword = req.body.rootPassword;	 var atpos = rootEmail.indexOf("@");	 var dotpos = rootEmail.lastIndexOf(".");	 var warehouseslist = req.body.warehouseslist;    //not null name    if(companyName == "" || companyName == null || companyName.length<2)    {        res.render('subscription.ejs', { flash: "Company name empty" });    }    //not null company    else if(contactPhone == "" || contactPhone == null)    {        res.render('subscription.ejs', { flash: "Company telephone empty" });    }    //not null website    else if(companyWebsite == "" || companyWebsite == null)    {        res.render('subscription.ejs', { flash: "Company website empty" });    }    //not null Name    else if(rootFullName == "" || rootFullName == null)    {        res.render('subscription.ejs', { flash: "Company user name empty" });    }    //not null company Link    else if(companyLink == "" || companyLink == null)    {        res.render('subscription.ejs', { flash: "Company link empty" });    }    //not null Email    else if(rootEmail == "" || rootEmail == null)    {        res.render('subscription.ejs', { flash: "Company root user email empty" });    }    //not null Password    else if(rootPassword == "" || rootPassword == null)    {        res.render('subscription.ejs', { flash: "Company root user password empty" });    }    //valid email    else if(contactEmail == "" || contactEmail == null)    {        res.render('subscription.ejs', { flash: "Company contact email empty" });    }    //valid email    else if(atpos < 1 || ( dotpos - atpos < 2 ))     {        res.render('subscription.ejs', { flash: "Company email malformed" });    }    else    {        var Company = Parse.Object.extend("Companies");        var company = new Company();				 	        company.save({				 	    name: companyName,				 	    address: companyAddress,				 	    email: contactEmail,				 		phone: contactPhone,				 	    website: companyWebsite,                        companyLink: companyLink                    },                     {				 	    success: function(company)                         {							//SIGNUP							var user = new Parse.User();							user.set("username", req.body.rootUsrname + "@" + companyLink);							user.set("password", req.body.rootPassword);							user.set("Class", "staff");							user.set("Master", "master");							user.set("email", req.body.rootEmail);                            //REMOVEIT?							user.set("Name", req.body.rootFullName);							user.set("Company", {__type: "Pointer", className: "Companies", objectId:company.id});						    user.signUp(null, {                                    success:                                        function(user)                                        {                                            /* SAVE THE STAFFID REGISTER */                                            var Staff = Parse.Object.extend("Staff");                                            var staff = new Staff();                                                                                        staff.set("Address", companyAddress);                                            staff.set("Name", rootFullName);                                            staff.set("Telephone", contactPhone);                                            staff.set("Cellphone", contactPhone);                                            staff.set("Division", "Bodega");                                            //staff.set("Geocode", );                                            staff.set("Position", "Entrada");                                                                                        staff.save({success: function(){                                                                                                        //save the warehouses ... max 10 warehouses                                                    for(var nwh=1; nwh<10; nwh++)                                                    {                                                        //BUGFIX for deleted warehouses                                                        if(typeof(req.body["Alias" + nwh.toString()]) === "undefined")                                                            continue;                                                                                                                var Cellars = Parse.Object.extend("Cellars");                                                        var cellar = new Cellars();                                                                                                                cellar.save({                                                                        Name: req.body["Alias" + nwh.toString()],                                                                        Country: req.body["Country" + nwh.toString()],                                                                        CountryCode: req.body["CountryCode" + nwh.toString()],                                                                        GeoCode: req.body["GeoCode" + nwh.toString()],                                                                        Address:req.body["Address" + nwh.toString()],                                                                        Company:{                                                                                    __type: "Pointer",                                                                                     className: "Companies",                                                                                     objectId:company.id                                                                                }                                                                    });                                                    }                                                                                                                                                                                                            /* SEND EMAIL */                                                    Parse.Cloud.run('sendMail', {                                                                    "text":"Company registered: " + company.get("name"),                                                                    "subject":"Welcome to Xpress",                                                                    "from_email":"notify@xpress.com",                                                                    "from_name":"Xpress company L.A.",                                                                    "to_email":company.get("email"),                                                                    "to_name":company.get("name")                                                                }, {                                                            success:function(result) {},                                                            error:function(){}                                                        });                                                                                                                                                         Parse.Cloud.run('sendMail', {                                                                    "text":"Company registered: " + company.get("name"),                                                                    "subject":"Welcome to Xpress",                                                                    "from_email":"notify@xpress.com",                                                                    "from_name":"Xpress company L.A.",                                                                    "to_email":user.get("email"),                                                                    "to_name":user.get("Name")                                                                }, {                                                            success:function(result) {},                                                            error:function(){}                                                        });                                                     //SEND TO THE STAFF SESSION                                                    res.redirect('/profile');                                                                                                }});                                        },                                    error:                                        function(error)                                         {                                            //delete the company                                            company.destroy();                                            // Show the error message and let the user try again                                            res.render('subscription.ejs', { flash: "Username and companylink already in use" });                                        }                                    }); 	  				 	    },				 	    error: function(post, error)                         {                                    // Show the error message and let the user try again                            res.render('subscription.ejs', { flash: "Error storing company on the DB" });				 	    }                    });     }};//DISPLAYS USER'S PROFILE YOU ARE VISITING  exports.company = function(req, res){     var queryCompany = new Parse.Query("Companies");	 var companyLink = req.params;	 var companyHost = companyLink.toString();	 var company = companyHost.slice(0);	   	   queryCompany.equalTo("companyLink", company);		   queryCompany.first({			   success: function(object){			       res.render('login.ejs', { 					   company: object			   	      });               }		   });	   };//RECIBE PETICION POST COMPANY (CLIENT REGISTRATION AND STORE REGISTRATION)exports.postcompany = function(req, res){    //verificamos si fue tienda la que pide registrarse    if(typeof(req.body.companyIDStore) != "undefined")    {        var storeName = req.body.storeName;        var storeLanguage = req.body.storeLanguage;        var storeID1 = req.body.storeID1;        var storeTel = req.body.storeTel;        var storeEmail = req.body.storeEmail;		var storeAddress = req.body.storeAddress;		var storeWebsite = req.body.storeWebsite;		var storeUsername = req.body.storeUsername;		var storePassword = req.body.storePassword;        var companyID = req.body.companyIDStore;        var companyLink = req.params;        var companyHost = companyLink.toString();        var company = companyHost.slice(0);                if(storeName == "" || storeName == null || storeName.length<2){          res.redirect('/' + company);        }else if(storeLanguage == "" || storeLanguage == null){          res.redirect('/' + company);        }else if(storeID1 == "" || storeID1 == null){          res.redirect('/' + company);        }else if(storeTel == "" || storeTel == null){          res.redirect('/' + company);        }else if(storeEmail == "" || storeEmail == null){          res.redirect('/' + company);        }else if(storeAddress == "" || storeAddress == null){          res.redirect('/' + company);             }else{                      var Agencies = Parse.Object.extend("Agencies");            var agency = new Agencies();            agency.save({                    Name: storeName.toUpperCase(),                    Email: storeEmail,                    Language: storeLanguage,                    ID1: storeID1,                    Telephone: storeTel,                    Company: {__type: "Pointer", className: "Companies", objectId:companyID},				    Address: storeAddress,				    Website: storeWebsite,				    Status: "Pending" }, {		 	    success: function(reg) {		 		                    var user = new Parse.User();                        user.set('username', storeUsername + "@" + company);                    user.set('password', storePassword);                    user.set('Class', "agency");                    user.set('AgencyID', {__type: "Pointer", className: "Agencies", objectId:reg.id});                    user.set("Company", {__type: "Pointer", className: "Companies", objectId:companyID});                                        user.signUp(null, {success:                        function(user)                        {                            /* SEND EMAIL ... DISABLED                            Parse.Cloud.run('sendMail', {                                            "text":"Store registered: " + reg.get("Name"),                                            "subject":"Welcome to Xpress",                                            "from_email":"notify@xpress.com",                                            "from_name":"Xpress company L.A.",                                            "to_email":reg.get("Email"),                                            "to_name":reg.get("Name")                                        }, {                                    success:function(result) {},                                    error:function(){}                                });  */                                                            res.redirect("/pendingRegistration");                        },                         error:                        function(error)                         {                            // Show the error message and let the user try again                            res.redirect('/' + company);                           }});                                               		 	    },		 	    error: function(post, error) {		 	      // The save failed.		 	      // error is a Parse.Error with an error code and message.                  reg.destroy();                  res.redirect('/' + company);   		 	    }		 	  });            			                             }            }    else  //REGISTRAR CLIENTE    {            var usrFullName = req.body.usrFullName;        var usrLanguage = req.body.usrLanguage;        var usr_ID1 = req.body.usrID1;        var usrTel = req.body.usrTel;        var usrEmail = req.body.usrEmail;        var usrUsername = req.body.usrUsername;        var usrPassword = req.body.usrPassword;        var usrRePassword = req.body.usrRePassword;        var companyID = req.body.companyID;        var companyLink = req.params;        var companyHost = companyLink.toString();        var company = companyHost.slice(0);                if(usrFullName == "" || usrFullName == null || usrFullName.length<2){            res.redirect('/' + company);        }else if(usrLanguage == "" || usrLanguage == null){          res.redirect('/' + company);        }else if(usr_ID1 == "" || usr_ID1 == null){          res.redirect('/' + company);        }else if(usrTel == "" || usrTel == null){          res.redirect('/' + company);        }else if(usrEmail == "" || usrEmail == null){          res.redirect('/' + company);          }        else{                       var Clients = Parse.Object.extend("Clients");            var client = new Clients();			            client.save({                    Name: usrFullName.toUpperCase(),                    Email: usrEmail,                    Language: usrLanguage,                    ID1: usr_ID1,                    Telephone: usrTel,                    Company: {__type: "Pointer", className: "Companies", objectId:companyID},                    passtext: usrPassword,                    Status: "Pending"               }, {success:                    function(reg)                    {		 		                        var user = new Parse.User();                                user.set('username', usrUsername + "@" + company);                        user.set('password', usrPassword);                        user.set('Class', "client");                        user.set('ClientID', {__type: "Pointer", className: "Clients", objectId:reg.id});                        user.set("Company", {__type: "Pointer", className: "Companies", objectId:companyID});                                                user.signUp(null, {                            success:                            function(user)                            {                                //save the destinations ... max 10 destinations                                for(var nwh=1; nwh<10; nwh++)                                {                                    //BUGFIX for deleted destinations                                    if(typeof(req.body["Alias" + nwh.toString()]) === "undefined")                                        continue;                                                                        var Destinations = Parse.Object.extend("Destinations");                                    var destination = new Destinations();                                                                        destination.save({                                            Alias: req.body["Alias" + nwh.toString()],                                            Address: req.body["Address" + nwh.toString()],                                            Country: req.body["Country" + nwh.toString()],                                            CountryCode: req.body["CountryCode" + nwh.toString()],                                            GeoCode: req.body["GeoCode" + nwh.toString()],                                            Client: reg                                        });                                }                                                                /* SEND EMAIL .. DISABLED, DONT WORK                                Parse.Cloud.run('sendMail', {                                                "text":"Store registered: " + reg.get("Name"),                                                "subject":"Welcome to Xpress",                                                "from_email":"notify@xpress.com",                                                "from_name":"Xpress company L.A.",                                                "to_email":reg.get("Email"),                                                "to_name":reg.get("Name")                                            }, {                                        success:function(result)                                         {                                                                                  },                                        error:function(){alert("Error sending email");}                                    });                                 */                                                                    //SEND TO THE PAGE OF PENDING ACCOUNT MESSAGE                                res.redirect("/pendingRegistration");                                                              },                             error:                            function(error)                             {                                reg.destroy();                                res.redirect('/' + company);                                  //res.render('company.ejs', { flash: "Username already in use" });                            }});                                              },                    error:                        function(error)                        {                            res.redirect('/' + company);                              //res.render('company.ejs', { flash: "Error storing client in the DB" });                        }                    }               );                            }    }}//ZONES TABLEexports.zones = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');	}    else    {        /*        req.body["document"] = "Staff/zones/zones";        req.body["conditions"] = {equalTo:{"Company":user.get("Company")} };                req.body["collection"] = "Receipts";        req.body["cols"] = {                            "ReceiptNum":"",                            "Consignee":{"Name":""},                            "ReceiptDate":"Date",                            "Zone":"",                            "TotalBoxes":"",                            "objectId":""                        };                search(req, res);        */                        var zones = new Parse.Query("Receipts");		        zones.equalTo("Company", user.get("Company") );		zones.include("Consignee");		zones.include("Shipper");        zones.descending("createdAt");                zones.find({			success: 			function(results)            {                                var groupedzones = {};                                for(i in results)                {                    var zone = results[i].get("Zone");                                        if(zone in groupedzones)                    {                                                name = results[i].get("Consignee").get("Name");                        if(name in groupedzones[zone]["Names"])                        {                            groupedzones[zone]["Names"][name] += results[i].get("TotalBoxes");                        }                        else                        {                            groupedzones[zone]["Names"][name] = results[i].get("TotalBoxes");                        }                    }                    else                    {                        groupedzones[zone] = {};                        groupedzones[zone]["Names"] = {};                                                name = results[i].get("Consignee").get("Name");                                                groupedzones[zone]["Names"][name] = results[i].get("TotalBoxes");                    }                                                        }                                res.render('Staff/zones/zones.ejs', { user:user, results: groupedzones });            }        });            }};								//TRASH SECTION    exports.trash = function(req, res){    var usrClass = Parse.User.current().get("Class");    var company = Parse.User.current().get("Company");    if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")	{		   res.redirect('/');    }    else	{        var trash = new Parse.Query("Receipts");		        trash.equalTo("Company", company);		trash.contains("Status", "Deleted:");		trash.include("Consignee");		trash.include("Shipper");                trash.find({			success: 			function(results)            {                res.render('Staff/trash/trash.ejs', { user:Parse.User.current(), results: results });            }        });    }};						exports.printreceipt = function(req, res){    var usrClass = Parse.User.current().get("Class");    var company = Parse.User.current().get("Company");    if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")	{		   res.redirect('/');    }    else	{            var q = new Parse.Query("Receipts");        q.include("Usr");        q.include("Shipper");        q.include("Consignee");        q.include("Company");        q.equalTo("objectId", req.params.receiptId);        q.first({success: function(receipt){                var q2 = new Parse.Query("Boxes");                                q2.equalTo("Receipt", {__type: "Pointer", className:"Receipts", objectId:receipt.id });                q2.find({success:function(boxes){                                            var groupedboxes = groupBoxes(boxes);                                            res.render('Staff/Warehouses/newlabel_partitions/receipt.ejs', {receipt:receipt, company:receipt.get("Company"), boxes:groupedboxes});                    }});            }});    }						}function groupBoxes(boxes){    var res=[];        for(i in boxes)    {        res = has_broths(boxes[i], res);    }        return res;}function has_broths(box, res){    for(i in res)    {        if(box.get("Width")==res[i].get("Width") &&             box.get("Height")==res[i].get("Height") &&            box.get("Length")==res[i].get("Length") &&            box.get("Weight")==res[i].get("Weight") )        {            return res;        }    }        res.push(box);    return res;}					exports.printlabels = function(req, res){    var usrClass = Parse.User.current().get("Class");    var company = Parse.User.current().get("Company");    if(!Parse.User.current() || usrClass === "client")    {		   res.redirect('/');    }    else	   {		            q = new Parse.Query("Receipts");                q.equalTo("objectId", req.params.receiptId);        q.include("Shipper");        q.include("ReceiptBy");        q.include("Usr");        q.include("Consignee");        q.include("Company");                q.first().then(function(object){                            var query = new Parse.Query("Boxes");                                query.ascending('BoxNum');                query.equalTo("Receipt", object);                                query.find({                    success:                         function(results)                        {                            res.render('Staff/Warehouses/newlabel_partitions/labelLayout.ejs', { receipt: object, boxes:results });                        }                    });                                        });            }						}	//RECORDS HISTORYexports.records = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    if(!Parse.User.current())    {			res.redirect('/');			    }    else    {                req.body["document"] = "Staff/Warehouses/records";        req.body["collection"] = "Receipts";        req.body["conditions"] = {equalTo:{Status:"Sent",                                            "Company":{__type: "Pointer", className: "Companies", objectId: user.get("Company").id} }};        req.body["cols"] = {                            "ReceiptNum":"",                            Consignee:{"Name":""},                             "Weight":"",                            "Volume":"",                            "Agent":"",                            "TotalBoxes":"",                            "Content":"",                            "objectId":""                        };                search(req, res);              /*        var query = new Parse.Query("Receipts");                query.equalTo("Company", user.get("Company") );        query.equalTo("Status", "Sent");        query.include("Consignee");        query.include("Shipper");        query.descending("createdAt");                query.find({            success:             function(results)            {                      res.render('Staff/Warehouses/records.ejs', {user:user, results:results});                            }        }*/    }};	exports.get_activation_template_clientPending = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    if(!Parse.User.current())    {			res.redirect('/');    }    else    {         var query = new Parse.Query("Clients");        query.get(req.body.clientID, {success: function(client){                            var query = new Parse.Query("Companies");                query.get(req.body.companyID, {success: function(company){                                            res.render('Staff/Clients/activate_template_pending.ejs', {client:client, company:company});                                        }});            }});    }}				exports.get_activation_template_clientInactive = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    if(!Parse.User.current())    {			res.redirect('/');    }    else    {          var query = new Parse.Query("Clients");        query.get(req.body.clientID, {success: function(client){                                var q = new Parse.Query("Companies");                q.get(req.body.companyID, {success: function(company){                                            res.render('Staff/Clients/activate_template_inactive.ejs', {newUser:req.body.user, newPass:req.body.pass, client:client, company:company});                                        }});            }});      }};exports.get_activation_template_storePending = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    if(!Parse.User.current())    {			res.redirect('/');    }    else    {         var query = new Parse.Query("Agencies");        query.get(req.body.storeID, {success: function(store){                            var query = new Parse.Query("Companies");                query.get(req.body.companyID, {success: function(company){                                            res.render('Staff/Agencies/activate_template_pending.ejs', {store:store, company:company});                                        }});            }});    }}				exports.get_activation_template_storeInactive = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    if(!Parse.User.current())    {			res.redirect('/');    }    else    {          var query = new Parse.Query("Agencies");        query.get(req.body.storeID, {success: function(store){                                var q = new Parse.Query("Companies");                q.get(req.body.companyID, {success: function(company){                                            res.render('Staff/Agencies/activate_template_inactive.ejs', {newUser:req.body.user, newPass:req.body.pass, store:store, company:company});                                        }});            }});      }};exports.get_activation_template_agencies = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    if(!Parse.User.current())    {			res.redirect('/');			    }    else    {              var query = new Parse.Query("Companies");        query.get(req.body.companyID, {success: function(company){                                var q = new Parse.Query(Parse.User);                q.include("AgencyID");                q.equalTo("AgencyID", {__type:"Pointer", className:"Agencies", objectId: req.body.agencyID});                q.first({success: function(usr){                                                res.render('Staff/Agencies/activate_template.ejs', {usr:usr, company:company});                                            }});            }});                    }};exports.get_receipt_template = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    if(!Parse.User.current())    {			res.redirect('/');    }    else    {        var query = new Parse.Query("Companies");        query.get(req.body.companyId, {success: function(company){                var q = new Parse.Query("Receipts");                q.include("Usr");                q.include("Shipper");                q.equalTo("objectId", req.body.receiptId);                q.first({success: function(receipt){                        res.render('Staff/Warehouses/newlabel_partitions/mailtemplate.ejs', {receipt:receipt, company:company});                    }});            }});    }};exports.get_repack_template = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();    if(!Parse.User.current())    {			res.redirect('/');    }    else    {        var query = new Parse.Query("Companies");        query.get(req.body.companyId, {success: function(company){                var q = new Parse.Query("Receipts");                q.include("Usr");                q.include("RepackShipper");                q.equalTo("objectId", req.body.receiptId);                q.first({success: function(receipt){                        res.render('Staff/Warehouses/repack_partitions/mailtemplateRepack.ejs', {receipt:receipt, company:company});                    }});            }});    }};exports.clientWarehouse = function(req, res){    res.render('Clients/clientWarehouse.ejs', {});};exports.clientWarehouseSent = function(req, res){    res.render('Clients/clientWarehouseSent.ejs', {});};